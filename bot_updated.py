# -*- coding: utf-8 -*-
"""
Bot with FSM (real & test modes)
Webhook mode (Flask) ‚Äî feed raw updates into aiogram dispatcher thread-safely.
"""

import os
import sys
import json
import asyncio
import logging
import threading
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, Optional, List
import re
import io

import aiohttp
from dotenv import load_dotenv
from flask import Flask, request

from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardButton, InlineKeyboardMarkup,
)

# Telethon optional
from telethon import TelegramClient

app = Flask(__name__)

# ---------------- Config & Env ----------------
load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("taverna")

def check_env_vars():
    print("=== Checking ENV variables ===")
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    if not BOT_TOKEN:
        print("‚ùå ERROR: BOT_TOKEN is missing")
        sys.exit(1)

    env_vars = [
        "BOT_TOKEN", "BOT_USERNAME", "ADMIN_ID",
        "TEST_CHANNEL", "MAIN_CHANNEL", "TG_API_ID", "TG_API_HASH",
        "SESSION_NAME", "SUPPLIER_CHANNEL", "SUPPLIER_NAME",
        "NP_API_KEY", "NP_API_URL", "MYDROP_API_KEY", "MYDROP_EXPORT_URL", "MYDROP_ORDERS_URL", "ORDERS_DIR", "USE_GCS", "GCS_BUCKET",
        "SERVICE_ACCOUNT_JSON", "USE_GDRIVE", "GDRIVE_FOLDER_ID", "TEST_MODE", "WEBHOOK_URL"
    ]
    for var in env_vars:
        value = os.getenv(var)
        if value:
            # mask potentially sensitive values (show only first 4 chars + ...)
            if var.upper().endswith(("KEY", "TOKEN", "SECRET", "PASSWORD")) or var in ("BOT_TOKEN", "SERVICE_ACCOUNT_JSON", "MYDROP_API_KEY", "NP_API_KEY"):
                masked = (str(value)[:4] + "...(masked)")
            else:
                masked = str(value) if len(str(value)) < 60 else str(value)[:57] + "..."
            print(f"‚úÖ {var} = {masked}")
        else:
            print(f"‚ö†Ô∏è {var} is not set")
    print("=== End ENV check ===")
    return BOT_TOKEN

BOT_TOKEN = check_env_vars()
BOT_USERNAME = os.getenv("BOT_USERNAME")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
TEST_CHANNEL = os.getenv("TEST_CHANNEL")
MAIN_CHANNEL = os.getenv("MAIN_CHANNEL")

api_id = int(os.getenv("TG_API_ID", "0") or 0)
api_hash = os.getenv("TG_API_HASH", "")
SESSION_NAME = os.getenv("SESSION_NAME", "bot1")
supplier_channel = os.getenv("SUPPLIER_CHANNEL")
supplier_name = os.getenv("SUPPLIER_NAME", "Supplier")

NP_API_KEY = os.getenv("NP_API_KEY")
NP_API_URL = os.getenv("NP_API_URL")

MYDROP_API_KEY = os.getenv("MYDROP_API_KEY")
MYDROP_EXPORT_URL = os.getenv("MYDROP_EXPORT_URL")
MYDROP_ORDERS_URL = os.getenv("MYDROP_ORDERS_URL")

ORDERS_DIR = os.getenv("ORDERS_DIR", "/tmp/orders")
Path(ORDERS_DIR).mkdir(parents=True, exist_ok=True)

TEST_MODE = os.getenv("TEST_MODE", "false").lower() == "true"

WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# ---------------- Cache for MyDrop products ----------------
PRODUCTS_CACHE = {
    "last_update": None,
    "data": None
}
CACHE_TTL = 900  # 15 —Ö–≤–∏–ª–∏–Ω (900 —Å–µ–∫—É–Ω–¥)

# ---------------- global async loop holder ----------------
# –±—É–¥–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π –≤ main()
ASYNC_LOOP: Optional[asyncio.AbstractEventLoop] = None

# ---------------- Aiogram bot ----------------
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

from aiogram.types import BotCommand

async def setup_commands():
    commands = [
        BotCommand(command="start", description="–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º"),
        BotCommand(command="publish_test", description="–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–∏–π –ø–æ—Å—Ç (–∞–¥–º—ñ–Ω)"),
        BotCommand(command="refresh_cache", description="–û–Ω–æ–≤–∏—Ç–∏ –∫–µ—à –≤–∏–≥—Ä—É–∑–∫–∏ (–∞–¥–º—ñ–Ω)"),
    ]
    try:
        await bot.set_my_commands(commands)
        logger.info("‚úÖ Bot commands set")
    except Exception:
        logger.exception("Cannot set bot commands (non-fatal).")

# ---------------- FSM ----------------
class OrderForm(StatesGroup):
    pib = State()
    phone = State()
    article = State()
    size = State()
    amount = State()
    delivery = State()
    address = State()
    payment = State()
    note = State()
    confirm = State()

# ---------------- Helpers: keyboards ----------------
def get_order_keyboard(post_id: int, test: bool = False):
    mode = "test" if test else "real"
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üõí –ó–∞–º–æ–≤–∏—Ç–∏", url=f"https://t.me/{BOT_USERNAME}?start=order_{mode}_{post_id}")]
        ]
    )

def delivery_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöö –ù–æ–≤–∞ –ü–æ—à—Ç–∞", callback_data="delivery:np")],
        [InlineKeyboardButton(text="üìÆ –£–∫—Ä –ü–æ—à—Ç–∞", callback_data="delivery:ukr")],
        [InlineKeyboardButton(text="üõí Rozetka", callback_data="delivery:rozetka")],
        [InlineKeyboardButton(text="üì¶ Justin", callback_data="delivery:justin")],
        [InlineKeyboardButton(text="‚úàÔ∏è Meest", callback_data="delivery:meest")],
    ])

def payment_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíµ –ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂", callback_data="pay:cod")],
        [InlineKeyboardButton(text="üí≥ –ü–æ–≤–Ω–∞ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞", callback_data="pay:full")],
        [InlineKeyboardButton(text="üí∏ –ß–∞—Å—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ (33%)", callback_data="pay:part")],
    ])

def confirm_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="order:confirm")],
        [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="order:cancel")]
    ])

# –ó–∞–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ä—É size_keyboard –Ω–∞ —Å—É–º—ñ—Å–Ω—É –≤–µ—Ä—Å—ñ—é (–≤–∏—Ä–æ–±–ª—è—î callback_data "size:<comp_idx>:<opt_idx>")
def size_keyboard(sizes: List[str], component_index: int = 0) -> InlineKeyboardMarkup:
    """
    –°—É–º—ñ—Å–Ω–∏–π –∑ –Ω–æ–≤–∏–º –æ–±—Ä–æ–±–Ω–∏–∫–æ–º callback'—ñ–≤:
    - —Ñ–æ—Ä–º—É—î callback_data —É —Ñ–æ—Ä–º–∞—Ç—ñ "size:<component_index>:<option_index>"
    - –¥–æ–¥–∞—î –∫–Ω–æ–ø–∫—É '–°–∫–∞—Å—É–≤–∞—Ç–∏'
    """
    kb = InlineKeyboardMarkup(row_width=3)
    buttons = [
        InlineKeyboardButton(text=str(s), callback_data=f"size:{component_index}:{i}")
        for i, s in enumerate(sizes)
    ]
    if buttons:
        kb.add(*buttons)
    kb.add(InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="order:cancel"))
    return kb

# ---------------- Routers / Handlers ----------------
# –∑–∞–º—ñ–Ω—ñ—Ç—å —ñ—Å–Ω—É—é—á–∏–π @router.message(CommandStart(deep_link=True)) handler –Ω–∞ —Ü–µ–π
@router.message(CommandStart())
async def cmd_start(msg: Message, state: FSMContext, command: CommandStart):
    """
    –ü—ñ–¥—Ç—Ä–∏–º—É—î —è–∫ –∑–≤–∏—á–∞–π–Ω–∏–π /start, —Ç–∞–∫ —ñ deep link –≤–∏–¥—É:
      /start order_<mode>_<post_id>
    """
    args = command.args or ""
    # —è–∫—â–æ —î deep link –≤–∏–¥—É order_<mode>_<post_id>
    if args.startswith("order_"):
        parts = args.split("_")
        if len(parts) == 3:
            mode, post_id = parts[1], parts[2]
            await state.update_data(post_message_id=post_id, mode=mode)
            await msg.answer("üßæ –†–æ–∑–ø–æ—á–Ω–µ–º–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è. –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ –ü–Ü–ë:")
            await state.set_state(OrderForm.pib)
            return

    # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ /start –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
    await msg.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç Taverna üëã\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ó–∞–º–æ–≤–∏—Ç–∏¬ª –ø—ñ–¥ –ø–æ—Å—Ç–æ–º —É –∫–∞–Ω–∞–ª—ñ, —â–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
    )

# ---------------- Test command ----------------
@router.message(Command("publish_test"))
async def cmd_publish_test(msg: Message):
    if msg.from_user.id != ADMIN_ID:
        await msg.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    text = (
        "üî• <b>–¢–µ—Å—Ç–æ–≤–∏–π –ø–æ—Å—Ç –¥–ª—è</b> @test_taverna\n\n"
        "–¶–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ <b>¬´–ó–∞–º–æ–≤–∏—Ç–∏¬ª</b>.\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —ñ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
    )
    kb = get_order_keyboard(post_id=12345, test=True)
    try:
        await bot.send_message(TEST_CHANNEL, text, reply_markup=kb)
        await msg.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π –ø–æ—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—ñ.")
    except Exception as e:
        await msg.answer(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")

@router.message(Command("refresh_cache"))
async def cmd_refresh_cache(msg: Message):
    if msg.from_user.id != ADMIN_ID:
        await msg.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    await msg.answer("‚è≥ –û–Ω–æ–≤–ª—é—é –∫–µ—à –≤–∏–≥—Ä—É–∑–∫–∏...")
    text = await load_products_export(force=True)
    if text:
        await msg.answer("‚úÖ –ö–µ—à –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
    else:
        await msg.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–µ—à—É. –ü–µ—Ä–µ–≤—ñ—Ä –ª–æ–≥–∏.")

# --- FSM: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ü–Ü–ë ---
@router.message(OrderForm.pib)
async def state_pib(msg: Message, state: FSMContext):
    full_name = msg.text.strip()
    parts = full_name.split()

    if len(parts) != 3:
        await msg.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∞—à–µ –ü–Ü–ë (–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ).")
        return

    if not all(len(p) > 1 for p in parts):
        await msg.answer("‚ùå –ö–æ–∂–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ –ü–Ü–ë –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± 2 —Å–∏–º–≤–æ–ª–∏.")
        return

    await state.update_data(pib=full_name)
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω (—É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX, 380XXXXXXXXX –∞–±–æ 0XXXXXXXXX):")
    await state.set_state(OrderForm.phone)

# --- –¢–µ–ª–µ—Ñ–æ–Ω (validated) ---
# –ú–æ–±—ñ–ª—å–Ω—ñ —Ç–∞ —Å—Ç–∞—Ü—ñ–æ–Ω–∞—Ä–Ω—ñ –∫–æ–¥–∏ ‚Äî –º–æ–∂–Ω–∞ –¥–æ–ø–æ–≤–Ω—é–≤–∞—Ç–∏ –≤ —Ä–∞–∑—ñ –ø–æ—Ç—Ä–µ–±–∏
VALID_MOBILE_CODES = {
    "67", "68", "96", "97", "98",
    "50", "66", "95", "99", "75",
    "63", "73", "93",
    "91", "92", "94",
}

VALID_LANDLINE_CODES = {
    "44","32","48","56","57","61","43","41","38","55","54","35","31","47","37","46",
    "372","322","342","352","362","412","432","512","522","532","562","572","642","652",
    "0312","0372","0342","0622"
}

@router.message(OrderForm.phone)
async def state_phone(msg: Message, state: FSMContext):
    phone = msg.text.strip()
    digits = None

    if m := re.fullmatch(r"^\+380(\d{9})$", phone):
        digits = m.group(1)
    elif m := re.fullmatch(r"^380(\d{9})$", phone):
        digits = m.group(1)
    elif m := re.fullmatch(r"^0(\d{9})$", phone):
        digits = m.group(1)

    if not digits:
        await msg.answer("‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –º–∞—î –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n+380XXXXXXXXX, 380XXXXXXXXX –∞–±–æ 0XXXXXXXXX.")
        return

    operator_code = digits[:2]
    land2 = digits[:2]
    land3 = digits[:3]
    land4 = digits[:4]

    if operator_code in VALID_MOBILE_CODES or land2 in VALID_LANDLINE_CODES or land3 in VALID_LANDLINE_CODES or land4 in VALID_LANDLINE_CODES:
        normalized_phone = f"+380{digits}"
        await state.update_data(phone=normalized_phone)
        await msg.answer("–í–≤–µ–¥—ñ—Ç—å –∞—Ä—Ç–∏–∫—É–ª –∞–±–æ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:")
        await state.set_state(OrderForm.article)
        return

    await msg.answer(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞/–º—ñ—Å—Ç–∞ ({digits[:4]}...). –í–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –Ω–æ–º–µ—Ä.")
    return

async def load_products_export(force: bool = False) -> Optional[str]:
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –≤–∏–≥—Ä—É–∑–∫—É –∑ MYDROP_EXPORT_URL (YML/JSON) –∑ –∫–µ—à–µ–º.
    –Ø–∫—â–æ force=True ‚Äî –∫–∞—á–∞—î –∑–∞–Ω–æ–≤–æ –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –∫–µ—à —â–µ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π.
    """
    global PRODUCTS_CACHE
    now = datetime.now()

    # –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–µ—à, —è–∫—â–æ –≤—ñ–Ω —Å–≤—ñ–∂–∏–π
    if not force and PRODUCTS_CACHE["last_update"] and (now - PRODUCTS_CACHE["last_update"]).seconds < CACHE_TTL:
        return PRODUCTS_CACHE["data"]

    export_url = os.getenv("MYDROP_EXPORT_URL")
    if not export_url:
        logger.error("‚ùå MYDROP_EXPORT_URL –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
        return None

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(export_url, timeout=20) as resp:
                if resp.status != 200:
                    logger.warning("‚ö†Ô∏è Export URL error %s", resp.status)
                    return None
                text = await resp.text()

                PRODUCTS_CACHE["last_update"] = now
                PRODUCTS_CACHE["data"] = text

                # –∑–±–µ—Ä–µ–∂–µ–º–æ —É —Ñ–∞–π–ª (–±–µ–∫–∞–ø)
                cache_file = Path(ORDERS_DIR) / "products_cache.xml"
                cache_file.write_text(text, encoding="utf-8")

                logger.info("‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –Ω–æ–≤—É –≤–∏–≥—Ä—É–∑–∫—É (%d —Å–∏–º–≤–æ–ª—ñ–≤)", len(text))
                return text
    except Exception as e:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∏–≥—Ä—É–∑–∫–∏: %s", e)

        # fallback ‚Äî –±–µ—Ä–µ–º–æ –∑ –∫–µ—à-—Ñ–∞–π–ª—É
        cache_file = Path(ORDERS_DIR) / "products_cache.xml"
        if cache_file.exists():
            return cache_file.read_text(encoding="utf-8")

        return None

# --- –ê—Ä—Ç–∏–∫—É–ª –∞–±–æ –Ω–∞–∑–≤–∞ ---
import io
import re
from html import unescape
import xml.etree.ElementTree as ET
from typing import Optional, Dict, Any

def apply_markup(price: Optional[float]) -> Optional[int]:
    """–î–æ–¥–∞—î +33% –¥–æ —Ü—ñ–Ω–∏ —ñ –æ–∫—Ä—É–≥–ª—é—î –¥–æ –≥—Ä–∏–≤–Ω—ñ (int)."""
    try:
        if price is None:
            return None
        return int(round(float(price) * 1.33))
    except Exception:
        return None

async def check_article_or_name(query: str) -> Optional[Dict[str, Any]]:
    """
    –®—É–∫–∞—î —Ç–æ–≤–∞—Ä –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∞–±–æ –Ω–∞–∑–≤—ñ —É –≤–∏–≥—Ä—É–∑—Ü—ñ (MYDROP_EXPORT_URL).
    –ü–æ–≤–µ—Ä—Ç–∞—î dict –∑ –ø–æ–ª—è–º–∏, –¥–æ–¥–∞–Ω–æ:
      - components: list[{"name":str, "options": [str,...]}] –∞–±–æ None
    –û–Ω–æ–≤–ª–µ–Ω–æ: –±—ñ–ª—å—à —Å—Ç—ñ–π–∫–µ –º–∞—Ç—á–µ–Ω–Ω—è –¥–ª—è —á–∏—Å–ª–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ (–≤–∏–¥—ñ–ª–µ–Ω–Ω—è —Ü–∏—Ñ—Ä, –ø—ñ–¥—Ä—è–¥–∫–æ–≤–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è).
    """
    q_raw = str(query or "").strip()
    q = q_raw.lower()
    if not q:
        return None

    text = await load_products_export()
    if not text:
        logger.warning("check_article_or_name: products feed is empty or not loaded")
        return None

    # —Ü–∏—Ñ—Ä–æ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ –∑–∞–ø–∏—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ "1053")
    q_digits = re.sub(r'\D', '', q_raw)

    def parse_components_from_description(desc_text: str):
        if not desc_text:
            return None
        desc = re.sub(r'<br\s*/?>', '\n', desc_text, flags=re.I)
        desc = re.sub(r'<[^>]+>', '', desc)
        desc = unescape(desc).strip()

        parts = re.split(r'(?m)^([–ê-–Ø–á–Ñ–Ü“êA-Za-z0-9\-\s]{2,60}):', desc)
        comps = []
        for i in range(1, len(parts), 2):
            name = parts[i].strip()
            content = parts[i+1].strip() if (i+1) < len(parts) else ""
            opts = []
            opts += re.findall(r'\b\d{2,3}-\d{2,3}\b', content)
            opts += re.findall(r'\b\d{2}\b', content)
            opts += re.findall(r'\b(?:XS|S|M|L|XL|XXL|XXXL)\b', content, flags=re.I)
            if re.search(r'—É–Ω—ñ–≤–µ—Ä—Å–∞–ª', content, flags=re.I):
                opts.append('—É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π')
            # dedupe preserving order
            seen = set()
            final_opts = []
            for o in opts:
                o_norm = str(o).strip()
                if not o_norm:
                    continue
                if o_norm.lower() in seen:
                    continue
                seen.add(o_norm.lower())
                final_opts.append(o_norm)
            if final_opts:
                comps.append({"name": name, "options": final_opts})
        return comps or None

    try:
        it = ET.iterparse(io.StringIO(text), events=("end",))
        for event, elem in it:
            tag = elem.tag
            if not (tag.endswith("offer") or tag.endswith("item") or tag.endswith("product")):
                elem.clear()
                continue

            offer_id = (elem.attrib.get("id") or "").strip()
            vendor_code = (elem.findtext("vendorCode") or elem.findtext("sku") or "").strip()
            name = (elem.findtext("name") or elem.findtext("title") or "").strip()
            price_text = elem.findtext("price") or ""
            try:
                drop_price = float(price_text) if price_text.strip() else None
            except Exception:
                drop_price = None
            rrc_text = elem.findtext("rrc") or elem.findtext("retail") or elem.findtext("oldprice") or None
            try:
                retail_price = float(rrc_text) if rrc_text and str(rrc_text).strip() else None
            except Exception:
                retail_price = None

            quantity_text = elem.findtext("quantity_in_stock")
            stock_qty = None
            if quantity_text and quantity_text.strip().isdigit():
                stock_qty = int(quantity_text.strip())

            stock_attr = elem.attrib.get("available", "true").lower()
            stock = "–Ñ" if stock_attr in ("true", "1", "yes") else "–ù–µ–º–∞—î"

            # ------------------------------------------------------------------
            sizes_from_param = []
            components_from_params = []

            for p in elem.findall("param"):
                pname_raw = p.attrib.get("name", "") or ""
                pname = pname_raw.strip()
                ptext = (p.text or "").strip()

                low = pname.lower()
                if any(x in low for x in ("size", "—Ä–æ–∑–º—ñ—Ä", "—Ä–∞–∑–º–µ—Ä")) and ptext:
                    parts = re.split(r'[;,/\\\n]+', ptext)
                    for part in parts:
                        v = part.strip()
                        if v:
                            sizes_from_param.append(v)
                    continue

                if any(kw in low for kw in COMPONENT_KEYWORDS):
                    opts = []
                    opts += re.findall(r'\b\d{2,3}-\d{2,3}\b', ptext)
                    opts += re.findall(r'\b(?:XS|S|M|L|XL|XXL|XXXL)\b', ptext, flags=re.I)
                    opts += re.findall(r'\b\d{2}\b', ptext)
                    if re.search(r'—É–Ω—ñ–≤–µ—Ä—Å–∞–ª', ptext, flags=re.I):
                        opts.append('—É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π')
                    if not opts and re.search(r'\b(—Ç–∞–∫|—î|available|–µ—Å—Ç—å)\b', ptext, flags=re.I):
                        opts = ['—à—Ç.']
                    seen2 = set()
                    final = []
                    for o in opts:
                        o2 = str(o).strip()
                        if not o2:
                            continue
                        if o2.lower() in seen2:
                            continue
                        seen2.add(o2.lower())
                        final.append(o2)
                    components_from_params.append({"name": pname or "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", "options": final})

            desc_text = elem.findtext("description") or ""
            components_from_desc = parse_components_from_description(desc_text)

            # Merge components
            components = None
            if components_from_desc:
                if components_from_params:
                    desc_names = {c["name"].lower(): c for c in components_from_desc}
                    merged = components_from_desc.copy()
                    for comp_p in components_from_params:
                        if comp_p["name"].lower() not in desc_names:
                            merged.append(comp_p)
                    components = merged
                else:
                    components = components_from_desc
            elif components_from_params:
                components = components_from_params
            elif sizes_from_param:
                components = [{"name": "–†–æ–∑–º—ñ—Ä", "options": list(dict.fromkeys(sizes_from_param))}]
            else:
                components = None
            # ------------------------------------------------------------------

            product = {
                "name": name or offer_id,
                "sku": vendor_code or offer_id,
                "drop_price": drop_price,
                "retail_price": retail_price,
                "final_price": apply_markup(drop_price) if drop_price is not None else None,
                "stock": stock,
                "stock_qty": stock_qty,
                "stock_text": f"{stock} ({stock_qty} —à—Ç.)" if stock_qty is not None else stock,
                "sizes": sizes_from_param or None,
                "components": components
            }

            # =============================================================================
            # –ü–æ–ª—ñ—Ç–∏–∫–∞ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è (–¥–æ–¥–∞—Ç–∫–æ–≤–µ, –±—ñ–ª—å—à —Ç–µ—Ä–ø–∏–º–µ –º–∞—Ç—á–µ–Ω–Ω—è –¥–ª—è digits)
            # =============================================================================
            qlow = q  # already lower
            # exact id/sku match (case-insensitive)
            if qlow and (qlow == (offer_id or "").lower() or (vendor_code and qlow == vendor_code.lower())):
                elem.clear()
                logger.debug("check_article_or_name: exact match by id/sku: query=%s offer_id=%s sku=%s", q_raw, offer_id, vendor_code)
                return product

            # numeric-matching: —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏, –ø–æ—Ä—ñ–≤–Ω—é—î–º–æ —Ü–∏—Ñ—Ä–æ–≤—ñ —á–∞—Å—Ç–∏–Ω–∏
            if q_digits:
                offer_digits = re.sub(r'\D', '', offer_id or "")
                sku_digits = re.sub(r'\D', '', vendor_code or "")
                # –ø–æ–≤–Ω–∏–π —Ü–∏—Ñ—Ä–æ–≤–∏–π –º–∞—Ç—á
                if offer_digits and q_digits == offer_digits:
                    elem.clear()
                    logger.debug("check_article_or_name: matched by digits (offer_id): %s -> %s", q_digits, offer_id)
                    return product
                if sku_digits and q_digits == sku_digits:
                    elem.clear()
                    logger.debug("check_article_or_name: matched by digits (sku): %s -> %s", q_digits, vendor_code)
                    return product
                # –ø—ñ–¥—Ä—è–¥–∫–æ–≤–∏–π —Ü–∏—Ñ—Ä–æ–≤–∏–π –º–∞—Ç—á (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ query '1053' —É 'ART-1053')
                if offer_digits and q_digits in offer_digits:
                    elem.clear()
                    logger.debug("check_article_or_name: digits substring match (offer_id): %s in %s", q_digits, offer_digits)
                    return product
                if sku_digits and q_digits in sku_digits:
                    elem.clear()
                    logger.debug("check_article_or_name: digits substring match (sku): %s in %s", q_digits, sku_digits)
                    return product

            # match by full name or partial name (as suggestion)
            if name and qlow == name.lower():
                elem.clear()
                logger.debug("check_article_or_name: exact match by name: %s -> %s", q_raw, name)
                return product

            if name and qlow in name.lower() and len(qlow) >= 3:
                product["suggestion"] = True
                elem.clear()
                logger.debug("check_article_or_name: suggestion for query '%s' -> '%s'", q_raw, name)
                return product

            elem.clear()
        # end iterparse
    except Exception as e:
        logger.exception("XML parse error in check_article_or_name: %s", e)

    logger.debug("check_article_or_name: no match for query '%s'", q_raw)
    return None

# ---------------- Helpers: component size search ----------------
COMPONENT_KEYWORDS = ["—à–∞–ø", "—à–∞–ø–∫–∞", "—Ä—É–∫–∞–≤", "—Ä—É–∫–∞–≤–∏", "—Ä—É–∫–∞–≤–∏—Ü", "—Ä—É–∫–∞–≤–∏—á", "–±–∞—Ñ", "–±–∞–ª–∞–∫–ª–∞–≤", "–∫–æ–º–ø–ª–µ–∫—Ç"]

async def find_component_sizes(product_name: str) -> Dict[str, List[str]]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –º–∞–ø—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç->list_of_sizes, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:
      { "—à–∞–ø–∫–∞": ["55-57","58-60"], "—Ä—É–∫–∞–≤–∏—Ü—è": ["S","M","L"] }
    –ê–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–æ—Å—Ç–∏–π:
      - —è–∫—â–æ —É name —Ç–æ–≤–∞—Ä—É –º—ñ—Å—Ç–∏—Ç—å—Å—è –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ '—à–∞–ø–∫–∞' –∞–±–æ '–∫–æ–º–ø–ª–µ–∫—Ç'),
        —Ç–æ —Å–∫–∞–Ω—É—î–º–æ –≤–µ—Å—å XML —ñ –∑–±–∏—Ä–∞—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è param, —è–∫—ñ –≤–∏–≥–ª—è–¥–∞—é—Ç—å —è–∫ —Ä–æ–∑–º—ñ—Ä–∏
        (—à—É–∫–∞—î–º–æ param name –º—ñ—Å—Ç–∏—Ç—å size/—Ä–∞–∑–º–µ—Ä/–†–æ–∑–º—ñ—Ä/–†–∞–∑–º–µ—Ä —ñ –±–µ—Ä–µ–º–æ —ó—Ö —Ç–µ–∫—Å—Ç–∏).
    –ü–æ–≤–µ—Ä—Ç–∞—î {} —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –∫–µ—à –ø—É—Å—Ç–∏–π.
    """
    res: Dict[str, List[str]] = {}
    text = PRODUCTS_CACHE.get("data")
    if not text:
        return res

    name_lower = (product_name or "").lower()

    # –≤–∏–∑–Ω–∞—á–∏–º–æ, —è–∫—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —à—É–∫–∞—Ç–∏ ‚Äî –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ —â–æ —î –≤ –Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—É
    to_search = [kw for kw in COMPONENT_KEYWORDS if kw in name_lower]
    if not to_search:
        # –Ø–∫—â–æ –±–µ–∑ –∫–ª—é—á—ñ–≤ —É –Ω–∞–∑–≤—ñ ‚Äî –≤—Å–µ –æ–¥–Ω–æ –ø—Ä–æ–±—ñ–∂–∏–º–æ—Å—è –ø–æ –≤—Å—å–æ–º—É —Ñ—ñ–¥—É
        to_search = COMPONENT_KEYWORDS.copy()

    try:
        import xml.etree.ElementTree as ET
        it = ET.iterparse(io.StringIO(text), events=("end",))
        for event, elem in it:
            tag = elem.tag
            if not (tag.endswith("offer") or tag.endswith("item") or tag.endswith("product")):
                elem.clear()
                continue

            name = (elem.findtext("name") or elem.findtext("title") or "").strip().lower()
            # —è–∫—â–æ –Ω–∞–∑–≤–∞ –ø—É—Å—Ç–∞—è ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
            if not name:
                elem.clear()
                continue

            # –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ –Ω–∞–∑–≤–∞ —Ü—å–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞ –º—ñ—Å—Ç–∏—Ç—å —è–∫–∏–π—Å—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑ to_search
            matched_components = [kw for kw in to_search if kw in name]
            if not matched_components:
                # —Ç–∞–∫–æ–∂ –º–æ–∂–Ω–∞ —à—É–∫–∞—Ç–∏ –ø–æ –æ–ø–∏—Å—É –∞–±–æ param->name, –∞–ª–µ —Å–ø–æ—á–∞—Ç–∫—É —Ç–∞–∫
                elem.clear()
                continue

            # –∑–±–∏—Ä–∞—î–º–æ param'–∏ —â–æ –≤–∏–≥–ª—è–¥–∞—é—Ç—å —è–∫ —Ä–æ–∑–º—ñ—Ä
            sizes = set()
            for p in elem.findall("param"):
                pname = (p.attrib.get("name") or "").lower()
                if any(x in pname for x in ("size", "—Ä–∞–∑–º–µ—Ä", "—Ä–æ–∑–º—ñ—Ä", "—Ä–∞–∑–º", "—Ä–∞–∑–º—ñ—Ä")) or pname.strip() in ("—Ä–∞–∑–º–µ—Ä", "size", "—Ä–æ–∑–º—ñ—Ä"):
                    if (p.text or "").strip():
                        sizes.add((p.text or "").strip())
            # –¥–µ—è–∫—ñ —Ñ—ñ–¥–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å —Ä–æ–∑–º—ñ—Ä–∏ —è–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ –∞–±–æ –ø—Ä—è–º–æ –≤ name (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "55-57")
            if not sizes:
                # —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —É name —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ –≤–∏–¥—É "55-57" –∞–±–æ "S, M, L"
                import re
                # 55-57 style
                ranges = re.findall(r"\b\d{2,3}-\d{2,3}\b", name)
                for r in ranges:
                    sizes.add(r)
                # –ø—Ä–æ—Å—Ç—ñ –±—É–∫–≤–µ–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ S, M, L (–∫—ñ–ª—å–∫–∞)
                letters = re.findall(r"\b([XSML]{1,3})\b", name.upper())
                for l in letters:
                    sizes.add(l)

            if sizes:
                for comp in matched_components:
                    if comp not in res:
                        res[comp] = []
                    res[comp].extend(list(sizes))

            elem.clear()

        # —É–Ω—ñ–∫–∞–ª—ñ–∑—É—î–º–æ —ñ –≤—ñ–¥—Å–æ—Ä—Ç—É—î–º–æ
        for k, v in list(res.items()):
            uniq = sorted(set([x.strip() for x in v if x and x.strip()]))
            if uniq:
                res[k] = uniq
            else:
                res.pop(k, None)

    except Exception:
        logger.exception("Error while scanning product feed for component sizes")

    return res

# ---------------- Helpers: size buttons + handlers (replace state_article + cb_size) ----------------
def build_size_keyboard(component_index: int, sizes: List[str]) -> InlineKeyboardMarkup:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î InlineKeyboardMarkup –∑ –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–æ–∑–º—ñ—Ä—ñ–≤.
    callback_data: "size:<component_index>:<size_index>"
    """
    kb = InlineKeyboardMarkup(row_width=3)
    buttons = [
        InlineKeyboardButton(text=str(s), callback_data=f"size:{component_index}:{i}")
        for i, s in enumerate(sizes)
    ]
    if buttons:
        kb.add(*buttons)
    # –∫–Ω–æ–ø–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è, –ø–æ—Å–∏–ª–∞—î callback —è–∫–∏–π –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —É order:cancel
    kb.add(InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="order:cancel"))
    return kb

# --- FSM: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞—Ä—Ç–∏–∫—É–ª—É –∞–±–æ –Ω–∞–∑–≤–∏ (updated: support component size selection) ---
@router.message(OrderForm.article)
async def state_article(msg: Message, state: FSMContext):
    query = msg.text.strip()
    await msg.chat.do("typing")
    product = await check_article_or_name(query)

    if not product:
        await msg.answer("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (–∞—Ä—Ç–∏–∫—É–ª –∞–±–æ —á–∞—Å—Ç–∏–Ω–∞ –Ω–∞–∑–≤–∏) –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–ø—ñ–¥—Ç—Ä–∏–º–∫–∞'.")
        return

    stock_text = product["stock_text"]

    # –Ø–∫—â–æ —Ü–µ –ª–∏—à–µ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è (—á–∞—Å—Ç–∫–æ–≤–∏–π –∑–±—ñ–≥)
    if product.get("suggestion"):
        sizes_text = f"\nüìè –†–æ–∑–º—ñ—Ä–∏: {', '.join(product['sizes'])}" if product.get("sizes") else ""
        await msg.answer(
            f"ü§î –ú–æ–∂–ª–∏–≤–æ –≤–∏ –º–∞–ª–∏ –Ω–∞ —É–≤–∞–∑—ñ:\n"
            f"üîñ <b>{product['name']}</b>\n"
            f"üÜî –ê—Ä—Ç–∏–∫—É–ª: <b>{product['sku']}</b>\n"
            f"üì¶ –ù–∞—è–≤–Ω—ñ—Å—Ç—å: <b>{stock_text}</b>\n"
            f"üí∞ –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ —Ü—ñ–Ω–∞ (–∑ –Ω–∞—Ü—ñ–Ω–∫–æ—é): {product.get('final_price') or '‚Äî'} –≥—Ä–Ω\n"
            f"üíµ –î—Ä–æ–ø —Ü—ñ–Ω–∞: {product.get('drop_price') or '‚Äî'} –≥—Ä–Ω"
            f"{sizes_text}\n\n"
            "–Ø–∫—â–æ —Ü–µ —Ç–µ, —â–æ —Ç—Ä–µ–±–∞ ‚Äî –≤–≤–µ–¥—ñ—Ç—å –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
        )
        return

    # –Ø–∫—â–æ —Ç–æ—á–Ω–∏–π –∑–±—ñ–≥ ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ
    await state.update_data(
        article=product["sku"],
        product_name=product["name"],
        stock=product["stock"],
        stock_qty=product.get("stock_qty"),
        price=product["final_price"],
        components=product.get("components")  # –º–æ–∂—É—Ç—å –±—É—Ç–∏ None –∞–±–æ —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
    )

    # –Ø–∫—â–æ —î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ => –ø–æ—á–∏–Ω–∞—î–º–æ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ –ø–∏—Ç–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä–∏ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏
    components = product.get("components")
    if components:
        # —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ selected_sizes —è–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π dict
        await state.update_data(selected_sizes={})
        # ask first component
        comp0 = components[0]
        opts = comp0.get("options") or []
        if not opts:
            # —è–∫—â–æ –Ω–µ–º–∞—î –æ–ø—Ü—ñ–π, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥—å–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É (quantity)
            await msg.answer(
                f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä:\n"
                f"üîñ <b>{product['name']}</b>\n"
                f"üÜî –ê—Ä—Ç–∏–∫—É–ª: <b>{product['sku']}</b>\n"
                f"üì¶ –ù–∞—è–≤–Ω—ñ—Å—Ç—å: <b>{stock_text}</b>\n"
                f"üí∞ –¶—ñ–Ω–∞ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞: {product.get('final_price') or '‚Äî'} –≥—Ä–Ω\n"
                f"üíµ –î—Ä–æ–ø —Ü—ñ–Ω–∞: {product.get('drop_price') or '‚Äî'} –≥—Ä–Ω\n\n"
                "üëâ –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É (—á–∏—Å–ª–æ):"
            )
            await state.set_state(OrderForm.amount)
            return

        # build inline keyboard for options
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=str(opt), callback_data=f"size:0:{i}")]
                for i, opt in enumerate(opts)
            ] + [
                [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="order:cancel")]
            ]
        )
        await msg.answer(
            f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä:\n"
            f"üîñ <b>{product['name']}</b>\n"
            f"üÜî –ê—Ä—Ç–∏–∫—É–ª: <b>{product['sku']}</b>\n"
            f"üì¶ –ù–∞—è–≤–Ω—ñ—Å—Ç—å: <b>{stock_text}</b>\n"
            f"üí∞ –¶—ñ–Ω–∞: {product.get('final_price') or '‚Äî'} –≥—Ä–Ω\n\n"
            f"üìè –í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –¥–ª—è: <b>{comp0['name']}</b>",
            reply_markup=kb
        )
        await state.set_state(OrderForm.size)
        return

    # –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ ‚Äî —è–∫ —Ä–∞–Ω—ñ—à–µ –∑–∞–ø–∏—Ç—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
    sizes_text = f"\nüìè –†–æ–∑–º—ñ—Ä–∏: {', '.join(product['sizes'])}" if product.get("sizes") else ""
    await msg.answer(
        f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä:\n"
        f"üîñ <b>{product['name']}</b>\n"
        f"üÜî –ê—Ä—Ç–∏–∫—É–ª: <b>{product['sku']}</b>\n"
        f"üì¶ –ù–∞—è–≤–Ω—ñ—Å—Ç—å: <b>{stock_text}</b>\n"
        f"üí∞ –¶—ñ–Ω–∞ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞: {product.get('final_price') or '‚Äî'} –≥—Ä–Ω\n"
        f"üíµ –î—Ä–æ–ø —Ü—ñ–Ω–∞: {product.get('drop_price') or '‚Äî'} –≥—Ä–Ω"
        f"{sizes_text}\n\n"
        "üëâ –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É (—á–∏—Å–ª–æ):",
    )
    await state.set_state(OrderForm.amount)

# --- –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —Ä–æ–∑–º—ñ—Ä—É —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏ (–æ–Ω–æ–≤–ª–µ–Ω–∏–π UX: Continue / Edit) ---
@router.callback_query(F.data.startswith("size:"))
async def cb_size_select(cb: CallbackQuery, state: FSMContext):
    """
    callback_data: size:{comp_index}:{opt_index}
    –ó–±–µ—Ä—ñ–≥–∞—î –≤–∏–±—ñ—Ä –≤ state.selected_sizes, –ø–æ—Ç—ñ–º –∞–±–æ –ø–∏—Ç–∞—î –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç,
    –∞–±–æ –ø–æ–∫–∞–∑—É—î –ø—ñ–¥—Å—É–º–æ–∫ —ñ –ø–æ–∫–∞–∑—É—î –∫–Ω–æ–ø–∫–∏: ‚úÖ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ | ‚Ü©Ô∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä–∏ | ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏
    """
    try:
        _, comp_idx_s, opt_idx_s = cb.data.split(":", 2)
        comp_idx = int(comp_idx_s)
        opt_idx = int(opt_idx_s)
    except Exception:
        await cb.answer("–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ –≤–∏–±–æ—Ä—É (callback).")
        return

    data = await state.get_data()
    components = data.get("components") or []
    if comp_idx < 0 or comp_idx >= len(components):
        await cb.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç.")
        return

    comp = components[comp_idx]
    opts = comp.get("options") or []
    if opt_idx < 0 or opt_idx >= len(opts):
        await cb.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç —Ä–æ–∑–º—ñ—Ä—É.")
        return

    chosen = opts[opt_idx]
    # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
    selected = data.get("selected_sizes") or {}
    selected[comp['name']] = chosen
    await state.update_data(selected_sizes=selected)

    await cb.answer(f"–í–∏–±—Ä–∞–Ω–æ: {comp['name']} ‚Äî {chosen}")

    # —è–∫—â–æ —î –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ‚Äî –ø–∏—Ç–∞—î–º–æ –π–æ–≥–æ
    next_idx = comp_idx + 1
    if next_idx < len(components):
        next_comp = components[next_idx]
        next_opts = next_comp.get("options") or []
        if not next_opts:
            # –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –±–µ–∑ –æ–ø—Ü—ñ–π
            await state.update_data(selected_sizes=selected)
            # –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –ø—Ä–æ–±—É—î–º–æ –∑–∞–ø–∏—Ç–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            await cb.message.answer(f"üìè –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: <b>{next_comp['name']}</b>\n(–æ–ø—Ü—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ)")
            # —Ç–µ–ø–µ—Ä —Å–ø—Ä–æ–±—É—î–º–æ –ø–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π, —è–∫—â–æ –≤—ñ–Ω –º–∞—î –æ–ø—Ü—ñ—ó
            # –∑–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∑ –æ–ø—Ü—ñ—è–º–∏
            found = False
            for j in range(next_idx + 1, len(components)):
                comp_j = components[j]
                opts_j = comp_j.get("options") or []
                if opts_j:
                    kb = build_size_keyboard(j, opts_j)
                    await cb.message.answer(f"üìè –í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –¥–ª—è: <b>{comp_j['name']}</b>", reply_markup=kb)
                    await state.set_state(OrderForm.size)
                    found = True
                    break
            if found:
                return
            # —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –±—É–¥–µ–º–æ –ø—ñ–¥—Å—É–º–æ–≤—É–≤–∞—Ç–∏ –¥–∞–ª—ñ
        else:
            kb = build_size_keyboard(next_idx, next_opts)
            await cb.message.answer(f"üìè –í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –¥–ª—è: <b>{next_comp['name']}</b>", reply_markup=kb)
            await state.set_state(OrderForm.size)
            return

    # —è–∫—â–æ —Ü–µ –±—É–≤ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–±–æ —ñ–Ω—à—ñ –Ω–µ –º–∞—é—Ç—å –æ–ø—Ü—ñ–π ‚Äî —Ñ–æ—Ä–º—É—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫ —ñ –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏
    selected = await state.get_data()
    selected_sizes = selected.get("selected_sizes") or {}
    if selected_sizes:
        summary = "; ".join([f"{k} ‚Äî {v}" for k, v in selected_sizes.items()])
        text = f"‚úÖ –í–∏ –≤–∏–±—Ä–∞–ª–∏: {summary}\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´‚úÖ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏¬ª, —â–æ–± –≤–≤–µ—Å—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å, –∞–±–æ ¬´‚Ü©Ô∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä–∏¬ª."
    else:
        text = "‚úÖ –†–æ–∑–º—ñ—Ä–∏ –Ω–µ –æ–±—Ä–∞–Ω—ñ (–≤—ñ–¥—Å—É—Ç–Ω—ñ –æ–ø—Ü—ñ—ó).\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´‚úÖ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏¬ª, —â–æ–± –≤–≤–µ—Å—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å."

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", callback_data="sizes:continue")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä–∏", callback_data="sizes:edit")],
        [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="order:cancel")],
    ])
    await cb.message.answer(text, reply_markup=kb)
    # –∑–∞–ª–∏—à–∞—î–º–æ —Å—Ç–∞–Ω OrderForm.size –¥–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è 'continue'
    await state.set_state(OrderForm.size)

# --- –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –≤–∏–±—ñ—Ä —Ä–æ–∑–º—ñ—Ä—ñ–≤ (–ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å) ---
@router.callback_query(F.data == "sizes:edit")
async def cb_sizes_edit(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    components = data.get("components") or []
    if not components:
        await cb.answer("–ù–µ–º–∞—î –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
        return

    # –û—á–∏—Å—Ç–∏–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –≤–∏–±—Ä–∞–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏
    await state.update_data(selected_sizes={})
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (index 0)
    first = components[0]
    opts = first.get("options") or []
    if not opts:
        # —è–∫—â–æ –Ω–µ–º–∞—î –æ–ø—Ü—ñ–π ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ, –∑–Ω–∞–π–¥–µ–º–æ –ø–µ—Ä—à–∏–π –∑ –æ–ø—Ü—ñ—è–º–∏
        found = False
        for j, comp in enumerate(components):
            opts_j = comp.get("options") or []
            if opts_j:
                kb = build_size_keyboard(j, opts_j)
                await cb.message.answer(f"üìè –í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –¥–ª—è: <b>{comp['name']}</b>", reply_markup=kb)
                found = True
                break
        if not found:
            await cb.answer("–û–ø—Ü—ñ–π —Ä–æ–∑–º—ñ—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        await state.set_state(OrderForm.size)
        return

    kb = build_size_keyboard(0, opts)
    await cb.message.answer(f"üìè –í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –¥–ª—è: <b>{first['name']}</b>", reply_markup=kb)
    await state.set_state(OrderForm.size)
    await cb.answer("–ü–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ –≤–∏–±—ñ—Ä —Ä–æ–∑–º—ñ—Ä—ñ–≤.")

# --- –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É ---
@router.message(OrderForm.amount)
async def state_amount(msg: Message, state: FSMContext):
    try:
        qty = int(msg.text.strip())
        if qty < 1:
            raise ValueError
    except ValueError:
        await msg.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ (–º—ñ–Ω—ñ–º—É–º 1).")
        return

    data = await state.get_data()
    max_stock = data.get("stock_qty")

    # —è–∫—â–æ —î —Ä–µ–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É stock_qty
    if max_stock is not None and qty > max_stock:
        await msg.answer(
            f"‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ü—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É: <b>{max_stock} —à—Ç.</b>\n"
            f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å:"
        )
        return  # –∑–∞–ª–∏—à–∞—î–º–æ —É —Ü—å–æ–º—É –∂ —Å—Ç–∞–Ω—ñ

    # —è–∫—â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
    await state.update_data(amount=qty)
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å —Å–ª—É–∂–±—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=delivery_keyboard())
    await state.set_state(OrderForm.delivery)

# --- –î–æ—Å—Ç–∞–≤–∫–∞ ---
@router.callback_query(F.data.startswith("delivery:"))
async def cb_delivery(cb: CallbackQuery, state: FSMContext):
    delivery = cb.data.split(":")[1]
    await state.update_data(delivery=delivery)
    if delivery == "np":
        await cb.message.answer("–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–ù–æ–≤–∞ –ü–æ—à—Ç–∞):")
        await state.set_state(OrderForm.address)
    else:
        await cb.message.answer("–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É/–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∏:")
        await state.set_state(OrderForm.address)
    await cb.answer()

@router.message(OrderForm.address)
async def state_address(msg: Message, state: FSMContext):
    await state.update_data(address=msg.text)
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–ø–ª–∞—Ç–∏:", reply_markup=payment_keyboard())
    await state.set_state(OrderForm.payment)

# --- –û–ø–ª–∞—Ç–∞ ---
@router.callback_query(F.data.startswith("pay:"))
async def cb_payment(cb: CallbackQuery, state: FSMContext):
    payment = cb.data.split(":")[1]
    await state.update_data(payment=payment)
    await cb.message.answer("–î–æ–¥–∞–π—Ç–µ –ø—Ä–∏–º—ñ—Ç–∫—É (–∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–Ω–µ–º–∞'):")
    await state.set_state(OrderForm.note)
    await cb.answer()

# --- –ü—Ä–∏–º—ñ—Ç–∫–∞ ---
@router.message(OrderForm.note)
async def state_note(msg: Message, state: FSMContext):
    note = msg.text.strip()
    await state.update_data(note=note)
    await msg.answer("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", reply_markup=confirm_keyboard())
    await state.set_state(OrderForm.confirm)

# --- –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (–æ–Ω–æ–≤–ª–µ–Ω–∏–π ‚Äî –ø–æ–∫–∞–∑—É—î selected_sizes —è–∫—â–æ —î) ---
@router.callback_query(F.data == "order:confirm")
async def cb_order_confirm(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    # –ø—ñ–¥–≥–æ—Ç—É—î–º–æ —Ä—è–¥–æ–∫ –∑ —Ä–æ–∑–º—ñ—Ä–∞–º–∏ (—è–∫—â–æ —î)
    selected_sizes = data.get("selected_sizes") or {}
    if selected_sizes:
        sizes_text = "; ".join([f"{k} ‚Äî {v}" for k, v in selected_sizes.items()])
    else:
        sizes_text = data.get("size") or "‚Äî"

    order_text = (
        "üì¶ –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø\n\n"
        f"üë§ –ü–Ü–ë: {data.get('pib')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
        f"üîñ –¢–æ–≤–∞—Ä: {data.get('product_name')} (SKU: {data.get('article')})\n"
        f"üìè –†–æ–∑–º—ñ—Ä–∏: {sizes_text}\n"
        f"üì¶ –ù–∞—è–≤–Ω—ñ—Å—Ç—å: {data.get('stock')}\n"
        f"üî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {data.get('amount', 1)} —à—Ç.\n"
        f"üöö –°–ª—É–∂–±–∞: {data.get('delivery')}\n"
        f"üìç –ê–¥—Ä–µ—Å–∞/–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: {data.get('address')}\n"
        f"üí≥ –¢–∏–ø –æ–ø–ª–∞—Ç–∏: {data.get('payment')}\n"
        f"üìù –ü—Ä–∏–º—ñ—Ç–∫–∞: {data.get('note')}\n"
        f"üïí –ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
    )
    # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–∞—á–∏–≤ –ø–æ–≤–Ω–∏–π –ø—ñ–¥—Å—É–º–æ–∫)
    try:
        await cb.message.edit_text(order_text, reply_markup=None)
    except Exception:
        # —è–∫—â–æ edit –Ω–µ –≤–¥–∞–≤—Å—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –º–∏–Ω—É–ª–æ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —á–∞—Å—É) ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await cb.message.answer(order_text)

    await cb.answer()

    # –î–æ–¥–∞—î–º–æ selected_sizes –≤ payload –¥–ª—è MyDrop –∞–±–æ –¥–ª—è –∞–¥–º—ñ–Ω–∞
    if data.get("mode") == "test":
        # –ü—Ä–∏–∫–ª–∞–¥: –¥–æ–¥–∞—î–º–æ selected_sizes –≤ prefill
        payload_for_prefill = dict(data)
        payload_for_prefill["selected_sizes"] = selected_sizes
        link = f"https://mydrop.com.ua/orders/new?prefill={json.dumps(payload_for_prefill, ensure_ascii=False)}"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîó –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–æ—Ä–º—É MyDrop", url=link)]
        ])
        await bot.send_message(ADMIN_ID, f"–¢–µ—Å—Ç–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n{order_text}", reply_markup=kb)
    else:
        # –î–æ–¥–∞—î–º–æ selected_sizes –≤ payload, —â–æ–± create_mydrop_order –º—ñ–≥ —ó—Ö –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ (–∑–∞–ø–∏—Ç admin/debug)
        payload = dict(data)
        payload["selected_sizes"] = selected_sizes
        asyncio.create_task(create_mydrop_order(payload, notify_chat=ADMIN_ID))

    await state.clear()

@router.callback_query(F.data == "order:cancel")
async def cb_order_cancel(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.edit_text("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await cb.answer()

# ---------------- MyDrop integration ----------------
async def create_mydrop_order(payload: Dict[str, Any], notify_chat: Optional[int] = None):
    """
    –§–æ—Ä–º—É—î —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ MyDrop (dropshipper endpoint).
    """
    orders_url = os.getenv("MYDROP_ORDERS_URL")
    api_key = os.getenv("MYDROP_API_KEY")
    if not orders_url or not api_key:
        logger.error("MYDROP_ORDERS_URL or MYDROP_API_KEY not configured")
        if notify_chat:
            await bot.send_message(notify_chat, "‚ö†Ô∏è MYDROP_ORDERS_URL –∞–±–æ MYDROP_API_KEY –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.")
        return None

    article = payload.get("article")
    product_name = payload.get("product_name") or payload.get("title") or article or "–¢–æ–≤–∞—Ä"
    amount = int(payload.get("amount", 1) or 1)
    price = payload.get("price") or 0
    vendor_name = os.getenv("SUPPLIER_NAME") or payload.get("vendor_name") or None

    product_obj = {
        "product_title": product_name,
        "sku": article,
        "price": price,
        "amount": amount
    }
    if vendor_name:
        product_obj["vendor_name"] = vendor_name

    # –§–æ—Ä–º—É—î–º–æ body –∑–∞–≤–∂–¥–∏ (–Ω–µ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ if)
    body = {
        "name": payload.get("pib"),
        "phone": payload.get("phone"),
        "products": [product_obj],
    }

    # –¥–æ–¥–∞–º–æ –≤–∏–±—Ä–∞–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ —É body (—è–∫—â–æ —î)
    if payload.get("selected_sizes"):
        body["selected_sizes"] = payload.get("selected_sizes")

    # –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
    if payload.get("delivery"):
        body["delivery_service"] = payload.get("delivery")
    if payload.get("address"):
        body["warehouse_number"] = payload.get("address")
    if payload.get("note"):
        body["description"] = payload.get("note")
    if payload.get("mode") == "test":
        body["order_source"] = "Bot Test"

    headers = {
        "X-API-KEY": api_key,
        "Content-Type": "application/json"
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(orders_url, json=body, headers=headers, timeout=20) as resp:
                text = await resp.text()
                try:
                    data = await resp.json()
                except Exception:
                    data = {"raw": text}
                if 200 <= resp.status < 300:
                    logger.info("MyDrop order created: %s", data)
                    if notify_chat:
                        await bot.send_message(notify_chat, f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ MyDrop.\n–í—ñ–¥–ø–æ–≤—ñ–¥—å: {json.dumps(data, ensure_ascii=False)}")
                    return data
                else:
                    logger.error("MyDrop order error %s: %s", resp.status, text)
                    if notify_chat:
                        await bot.send_message(notify_chat, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ MyDrop (status {resp.status}):\n{text}")
                    return None
    except Exception as e:
        logger.exception("Error creating MyDrop order: %s", e)
        if notify_chat:
            await bot.send_message(notify_chat, f"‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤ MyDrop: {e}")
        return None

# ---------------- Telethon client ----------------
telethon_client: Optional[TelegramClient] = None
if api_id and api_hash:
    session_path = SESSION_NAME
    try:
        telethon_client = TelegramClient(session_path, api_id, api_hash)
        logger.info("Telethon client initialized (session=%s)", session_path)
    except Exception:
        logger.exception("Failed init Telethon client")
        telethon_client = None
else:
    logger.warning("Telethon not configured (TG_API_ID/TG_API_HASH missing)")
    telethon_client = None

# ---------------- Flask app & webhook endpoint ----------------

@app.route(WEBHOOK_PATH, methods=["POST"])
def webhook():
    """
    –ü—Ä–∏–π–º–∞—î–º–æ JSON –≤—ñ–¥ Telegram ‚Äî —à–≤–∏–¥–∫–æ —à–µ–¥—É–ª–µ–º–æ –æ–±—Ä–æ–±–∫—É –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º—É –ª—É–ø—ñ.
    –í–ê–ñ–õ–ò–í–û: —Ç—É—Ç –º–∏ –ù–ï –∑–∞–ø—É—Å–∫–∞—î–º–æ asyncio.run, –∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ run_coroutine_threadsafe,
    —â–æ–± –ø–µ—Ä–µ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É –≤ –≥–æ–ª–æ–≤–Ω–∏–π asyncio-–ª—É–ø (ASYNC_LOOP).
    """
    global ASYNC_LOOP
    try:
        update = request.get_json(force=True)
        if not ASYNC_LOOP or ASYNC_LOOP.is_closed():
            logger.warning("‚ö†Ô∏è ASYNC_LOOP not ready or already closed")
            return "loop not ready", 503
        if not update:
            logger.warning("‚ö†Ô∏è Empty update body from Telegram")
            return "no update", 400

        logger.debug("Update received: %s", update)
        asyncio.run_coroutine_threadsafe(dp.feed_raw_update(bot, update), ASYNC_LOOP)
        return "ok", 200
    except Exception as e:
        logger.exception("Webhook parsing error: %s", e)
        return "bad request", 400

@app.route("/")
def index():
    return "Bot is running!", 200

@app.route("/healthz")
def healthz():
    logger.info("üîÑ Healthcheck –∑–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ (keepalive ping).")
    return "ok", 200

def run_flask():
    port = int(os.getenv("PORT", "10000"))
    logging.info(f"üåê Flask healthcheck running on port {port}")
    # –£ dev —Ä–µ–∂–∏–º—ñ this is fine; –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω—ñ - –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ gunicorn/uvicorn
    app.run(host="0.0.0.0", port=port)

# ---------------- Main ----------------
async def main():
    global ASYNC_LOOP, WEBHOOK_URL
    ASYNC_LOOP = asyncio.get_running_loop()

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask healthcheck/webhook endpoint –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    logger.info("Flask thread started (healthcheck + webhook endpoint).")

    # –°–ø—Ä–æ–±–∞ –≤–∏–∫–ª–∏–∫—É startup() dispatcher'–∞ ‚Äî —Å—É–º—ñ—Å–Ω–æ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –≤–µ—Ä—Å—ñ—è–º–∏ aiogram
    try:
        if hasattr(dp, "startup"):
            startup = getattr(dp, "startup")
            if asyncio.iscoroutinefunction(startup):
                await startup()
            else:
                startup()
            logger.info("Dispatcher startup() executed (if available).")
        else:
            logger.info("Dispatcher has no startup() method ‚Äî skipping warmup.")
    except Exception:
        logger.exception("Dispatcher warmup failed (non-fatal).")

    # –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
    try:
        await setup_commands()
    except Exception:
        logger.exception("setup_commands failed but continuing...")

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–µ—à —ñ–∑ —Ñ–∞–π–ª—É (—è–∫—â–æ —î)
    cache_file = Path(ORDERS_DIR) / "products_cache.xml"
    if cache_file.exists():
        try:
            PRODUCTS_CACHE["data"] = cache_file.read_text(encoding="utf-8")
            PRODUCTS_CACHE["last_update"] = datetime.fromtimestamp(cache_file.stat().st_mtime)
            logger.info("Loaded products cache from file (size=%d)", len(PRODUCTS_CACHE['data'] or ''))
        except Exception:
            logger.exception("Failed to load products cache file")

    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π webhook –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è–º –Ω–æ–≤–æ–≥–æ (–Ω–µ–º–∞ –≥–∞—Ä–∞–Ω—Ç—ñ—ó –∞–ª–µ –∫–æ—Ä–∏—Å–Ω–æ)
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        logger.exception("Delete webhook failed (non-fatal)")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ –∫–æ—Ä–µ–∫—Ü—ñ—è WEBHOOK_URL
    if not WEBHOOK_URL:
        logger.error("‚ùå WEBHOOK_URL is not set in env. Set WEBHOOK_URL=https://<your-service>/webhook")
        sys.exit(1)

    # –î–æ–¥–∞—î–º–æ —à–ª—è—Ö WEBHOOK_PATH, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∫–∞–∑–∞–≤ –ª–∏—à–µ –±–∞–∑–æ–≤–∏–π URL
    if not WEBHOOK_URL.endswith(WEBHOOK_PATH):
        WEBHOOK_URL = WEBHOOK_URL.rstrip("/") + WEBHOOK_PATH
        logger.info("Adjusted WEBHOOK_URL to %s", WEBHOOK_URL)

    # Telegram –≤–∏–º–∞–≥–∞—î https webhook
    if not WEBHOOK_URL.startswith("https://"):
        logger.error("‚ùå WEBHOOK_URL must start with https://")
        sys.exit(1)

    # –°—Ç–∞–≤–∏–º–æ webhook
    try:
        await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
        logger.info("‚úÖ Webhook set to %s", WEBHOOK_URL)
    except Exception:
        logger.exception("Setting webhook failed (non-fatal).")

    logger.info("Bot ready ‚Äî waiting for webhook updates...")
    # –£—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ—Ü–µ—Å –∑–∞–ø—É—â–µ–Ω–∏–º (–±–µ–∑–ø–µ—á–Ω–∏–π –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π wait)
    try:
        await asyncio.Event().wait()
    except asyncio.CancelledError:
        logger.info("Main wait cancelled, proceeding to shutdown.")

# ---------------- Graceful shutdown helper ----------------
async def shutdown():
    logger.info("Shutdown: starting cleanup...")

    # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏ webhook (—â–æ–± Telegram –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–≤ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π URL)
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("Shutdown: webhook deleted.")
    except Exception:
        logger.exception("Shutdown: failed to delete webhook (non-fatal).")

    # –í–∏–∫–ª–∏–∫ shutdown –¥–ª—è dispatcher (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π)
    try:
        shutdown_fn = getattr(dp, "shutdown", None)
        if shutdown_fn:
            if asyncio.iscoroutinefunction(shutdown_fn):
                await shutdown_fn()
            else:
                shutdown_fn()
            logger.info("Shutdown: dispatcher.shutdown() executed.")
    except Exception:
        logger.exception("Shutdown: dispatcher shutdown failed (non-fatal).")

    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–µ—Å—ñ—é –±–æ—Ç–∞ / —Ä–µ—Å—É—Ä—Å—ñ–≤
    try:
        if hasattr(bot, "session") and getattr(bot, "session", None) is not None:
            # aiogram 3.x: bot.session exists
            try:
                await bot.session.close()
                logger.info("Shutdown: bot.session closed.")
            except Exception:
                logger.exception("Shutdown: failed to close bot.session.")
        else:
            # fallback: —è–∫—â–æ —î –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π close()
            close_fn = getattr(bot, "close", None)
            if close_fn:
                if asyncio.iscoroutinefunction(close_fn):
                    await close_fn()
                else:
                    close_fn()
                logger.info("Shutdown: bot.close() executed.")
    except Exception:
        logger.exception("Shutdown: failed to close bot resources (non-fatal).")

    logger.info("Shutdown: cleanup finished.")

# ---------------- Launcher ----------------
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Received stop signal ‚Äî running graceful shutdown...")
        try:
            asyncio.run(shutdown())
        except Exception:
            logger.exception("Error during shutdown routine.")
        logger.info("Bot stopped.")
    except Exception:
        logger.exception("Unhandled exception in main()")
        try:
            asyncio.run(shutdown())
        except Exception:
            logger.exception("Error during shutdown routine after unhandled exception.")
