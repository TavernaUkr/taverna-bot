# keyboards/inline_keyboards.py
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData
from typing import List
from config_reader import config

# --- –§–∞–±—Ä–∏–∫–∏ CallbackData ---
# –°—Ç–≤–æ—Ä—é—î–º–æ "—à–∞–±–ª–æ–Ω–∏" –¥–ª—è –¥–∞–Ω–∏—Ö, —â–æ –±—É–¥—É—Ç—å –∑–∞—à–∏—Ç—ñ –≤ –∫–Ω–æ–ø–∫–∏.
# –¶–µ –Ω–∞–±–∞–≥–∞—Ç–æ –±–µ–∑–ø–µ—á–Ω—ñ—à–µ —ñ –∑—Ä—É—á–Ω—ñ—à–µ, –Ω—ñ–∂ –ø—Ä–æ—Å—Ç–æ —Ä—è–¥–∫–∏.

class AddToCartCallback(CallbackData, prefix="add_cart"):
    sku: str
    offer_id: str
    quantity: int

class RemoveFromCartCallback(CallbackData, prefix="rem_cart"):
    sku: str # –í–∏–¥–∞–ª—è—î–º–æ –≤–µ—Å—å —Ç–æ–≤–∞—Ä –∑–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–º, –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–∑–º—ñ—Ä—É

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä ---

def get_main_menu_keyboard():
    builder = InlineKeyboardBuilder()
    # –¢–µ–ø–µ—Ä –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ –±—Ä–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    builder.button(text="üìú –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", url=config.main_channel_url)
    builder.button(text="üîé –ü–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é/–∞—Ä—Ç–∏–∫—É–ª–æ–º", callback_data="start_search")
    builder.button(text="üõí –ú—ñ–π –∫–æ—à–∏–∫", callback_data="show_cart")
    builder.adjust(1)
    return builder.as_markup()

def get_product_card_keyboard(product: dict):
    builder = InlineKeyboardBuilder()
    
    # –î–∏–Ω–∞–º—ñ—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–æ–∑–º—ñ—Ä—ñ–≤
    row_buttons = []
    available_offers = [offer for offer in product['offers'] if offer['available']]
    
    for offer in available_offers:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ñ–∞–±—Ä–∏–∫—É CallbackData
        callback_data = AddToCartCallback(
            sku=product['sku'], 
            offer_id=offer['offer_id'],
            quantity=1 # –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        ).pack()
        row_buttons.append(builder.button(text=offer['size'], callback_data=callback_data))
        
        # –†–æ–∑–º—ñ—â—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥, —è–∫ –≤–∏ —ñ —Ö–æ—Ç—ñ–ª–∏
        if len(row_buttons) == 3:
            builder.row(*row_buttons)
            row_buttons = []
    
    # –î–æ–¥–∞—î–º–æ –∑–∞–ª–∏—à–æ–∫ –∫–Ω–æ–ø–æ–∫, —è–∫—â–æ –≤–æ–Ω–∏ —î
    if row_buttons:
        builder.row(*row_buttons)

    builder.button(text="‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="back_to_catalog")
    return builder.as_markup()

def get_cart_keyboard(cart_items: List[dict]):
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É –≤ –∫–æ—à–∏–∫—É
    for item in cart_items:
        # TODO: –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ "–û—Ñ–æ—Ä–º–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ü–µ–π —Ç–æ–≤–∞—Ä", "–ó–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å"
        remove_callback = RemoveFromCartCallback(sku=item['sku']).pack()
        builder.button(text=f"‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ {item['name']}", callback_data=remove_callback)
    
    # –ó–∞–≥–∞–ª—å–Ω—ñ –∫–Ω–æ–ø–∫–∏
    if cart_items:
        builder.button(text="‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è", callback_data="start_checkout")
        builder.button(text="üóë –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", callback_data="clear_cart")

    builder.button(text="üõç –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏", callback_data="back_to_catalog")
    builder.adjust(1) # –í—Å—ñ –∫–Ω–æ–ø–∫–∏ –æ–¥–Ω–∞ –ø—ñ–¥ –æ–¥–Ω–æ—é
    return builder.as_markup()

def get_order_confirmation_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –í—Å–µ –≤—ñ—Ä–Ω–æ, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_order")
    builder.button(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="cancel_order")
    builder.adjust(1)
    return builder.as_markup()
