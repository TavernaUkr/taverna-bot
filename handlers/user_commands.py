# handlers/user_commands.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.fsm.context import FSMContext

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤—Å–µ, —â–æ –º–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ —Ä–∞–Ω—ñ—à–µ
from keyboards import inline_keyboards
from fsm.order_states import OrderFSM
from services import cart_service, xml_parser
from handlers.product_handlers import _render_product_card # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ö–µ–ª–ø–µ—Ä

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ü—å–æ–≥–æ —Ñ–∞–π–ª—É. –í—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –±—É–¥—É—Ç—å –ø—Ä–∏–≤'—è–∑–∞–Ω—ñ –¥–æ –Ω—å–æ–≥–æ.
router = Router()

# --- –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start ---
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, command: CommandObject):
    """
    –¶–µ–π —Ö–µ–Ω–¥–ª–µ—Ä —Ç–µ–ø–µ—Ä –æ–±—Ä–æ–±–ª—è—î —ñ –∑–≤–∏—á–∞–π–Ω–∏–π /start, —ñ deep-link (/start SKU).
    """
    await state.clear()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∞—Ä–≥—É–º–µ–Ω—Ç (–∞—Ä—Ç–∏–∫—É–ª) –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /start
    sku_from_deeplink = command.args
    if sku_from_deeplink:
        product = await xml_parser.get_product_by_sku(sku_from_deeplink)
        if product:
            # –Ø–∫—â–æ —Ç–æ–≤–∞—Ä –∑–Ω–∞–π–¥–µ–Ω–æ, –æ–¥—Ä–∞–∑—É –ø–æ–∫–∞–∑—É—î–º–æ –π–æ–≥–æ –∫–∞—Ä—Ç–∫—É
            card_text = _render_product_card(product)
            keyboard = inline_keyboards.get_product_card_keyboard(product)
            if product['pictures']:
                await message.answer_photo(
                    photo=product['pictures'][0],
                    caption=card_text,
                    reply_markup=keyboard
                )
            else:
                await message.answer(text=card_text, reply_markup=keyboard)
            return

    # –Ø–∫—â–æ deep-link –Ω–µ–º–∞—î –∞–±–æ —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    await message.answer(
        "üëã –í—ñ—Ç–∞—î–º–æ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ '–¢–∞–≤–µ—Ä–Ω–∞'! \n\n–¢—É—Ç –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –Ω–∞–π–∫—Ä–∞—â–µ —Ç–∞–∫—Ç–∏—á–Ω–µ —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è.",
        reply_markup=inline_keyboards.get_main_menu_keyboard()
    )

# --- –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–ª–±–µ–∫—É –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ---
# –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —É –Ω–∞—Å –±—É–¥–µ –∫–Ω–æ–ø–∫–∞ –∑ callback_data="back_to_main_menu"
@router.callback_query(F.data == "back_to_main_menu")
async def cb_back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞ –≥–æ–ª–æ–≤–Ω—É".
    –ü—Ä–∞—Ü—é—î –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–æ /start, –∞–ª–µ —Ä–µ–¥–∞–≥—É—î –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    """
    await state.clear()
    await callback.message.edit_text(
        "üëã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
        reply_markup=inline_keyboards.get_main_menu_keyboard()
    )
    await callback.answer()

# --- –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–ª–±–µ–∫—É –¥–ª—è –ø–æ—á–∞—Ç–∫—É –ø–æ—à—É–∫—É —Ç–æ–≤–∞—Ä—É ---
@router.callback_query(F.data == "start_search")
async def cb_start_search(callback: CallbackQuery, state: FSMContext):
    """
    –†–µ–∞–≥—É—î –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é/–∞—Ä—Ç–∏–∫—É–ª–æ–º" —ñ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å
    –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É.
    """
    await callback.message.edit_text(
        "üîç –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –∞–±–æ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ—à—É–∫—É:"
    )
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω FSM, —â–æ–± –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    # –æ–±—Ä–æ–±–∏–≤ —ñ–Ω—à–∏–π, —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä.
    await state.set_state(OrderFSM.awaiting_sku_search)
    await callback.answer()

# --- –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞ ---
# –í—ñ–Ω –±—É–¥–µ —Ä–µ–∞–≥—É–≤–∞—Ç–∏ —ñ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /basket, —ñ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú—ñ–π –∫–æ—à–∏–∫"

# –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏–º–æ –¥–æ–ø–æ–º—ñ–∂–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é, —â–æ–± –Ω–µ –¥—É–±–ª—é–≤–∞—Ç–∏ –∫–æ–¥
async def show_cart_for_user(message: Message, user_id: int):
    cart_items = await cart_service.get_cart(user_id)

    if not cart_items:
        await message.answer(
            "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.",
            reply_markup=inline_keyboards.get_main_menu_keyboard()
        )
        return

    total_price = sum(item['final_price'] * item['quantity'] for item in cart_items)
    cart_text = "üõí **–í–∞—à –∫–æ—à–∏–∫:**\n\n"
    for item in cart_items:
        cart_text += f"üîπ {item['name']} ({item['size']})\n"
        cart_text += f"   `{item['quantity']} —à—Ç. x {item['final_price']} –≥—Ä–Ω`\n"
    cart_text += f"\nüí∞ **–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_price} –≥—Ä–Ω**"

    await message.answer(
        cart_text,
        reply_markup=inline_keyboards.get_cart_keyboard(cart_items)
    )

@router.message(Command("basket"))
async def cmd_basket(message: Message):
    await show_cart_for_user(message, message.from_user.id)

@router.callback_query(F.data == "show_cart")
async def cb_show_cart(callback: CallbackQuery):
    await callback.message.delete()
    await show_cart_for_user(callback.message, callback.from_user.id)
    await callback.answer()