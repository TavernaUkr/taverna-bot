# handlers/user_commands.py
from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤—Å–µ, —â–æ –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ
from keyboards import inline_keyboards
from keyboards.inline_keyboards import NavigationCallback, CartCallback
from fsm.order_states import OrderFSM
from services import cart_service, xml_parser
from handlers.product_handlers import render_product_card # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ö–µ–ª–ø–µ—Ä

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä
router = Router()


# --- –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –∫–æ—à–∏–∫–∞ ---
async def show_cart(target: Message | CallbackQuery, state: FSMContext):
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞."""
    user_id = target.from_user.id
    cart_data = await cart_service.get_cart(user_id)
    cart_items = cart_data.get("items", [])

    if not cart_items:
        text = "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π."
        keyboard = inline_keyboards.get_main_menu_keyboard()
    else:
        total_price = sum(item['final_price'] * item['quantity'] for item in cart_items)
        text = "üõí **–í–∞—à –∫–æ—à–∏–∫:**\n\n"
        for i, item in enumerate(cart_items, 1):
            text += f"*{i}. {item['name']} ({item['size']})*\n"
            text += f"`{item['quantity']} —à—Ç. x {item['final_price']} –≥—Ä–Ω` = `{item['quantity'] * item['final_price']}` –≥—Ä–Ω\n\n"
        text += f"üí∞ **–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_price} –≥—Ä–Ω**\n\n"
        text += "–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º."
        
        keyboard = inline_keyboards.get_cart_view_keyboard(cart_items)

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏: –Ω–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º —á–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è–º
    if isinstance(target, Message):
        await target.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    else: # CallbackQuery
        await target.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

# --- –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start —Ç–∞ deep-link ---
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∞—Ä–≥—É–º–µ–Ω—Ç (–∞—Ä—Ç–∏–∫—É–ª) –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /start
    args = message.text.split()
    if len(args) > 1:
        sku_from_deeplink = args[1]
        product = await xml_parser.get_product_by_sku(sku_from_deeplink)
        if product:
            # –Ø–∫—â–æ —Ç–æ–≤–∞—Ä –∑–Ω–∞–π–¥–µ–Ω–æ, –æ–¥—Ä–∞–∑—É –ø–æ–∫–∞–∑—É—î–º–æ –π–æ–≥–æ –∫–∞—Ä—Ç–∫—É
            card_text = render_product_card(product)
            keyboard = inline_keyboards.get_product_card_keyboard(product)
            await message.answer(text=card_text, reply_markup=keyboard)
            return

    # –Ø–∫—â–æ deep-link –Ω–µ–º–∞—î –∞–±–æ —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    await message.answer(
        "üëã –í—ñ—Ç–∞—î–º–æ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ '–¢–∞–≤–µ—Ä–Ω–∞'!\n\n–¢—É—Ç –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –Ω–∞–π–∫—Ä–∞—â–µ —Ç–∞–∫—Ç–∏—á–Ω–µ —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è.",
        reply_markup=inline_keyboards.get_main_menu_keyboard()
    )


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó ---
@router.callback_query(NavigationCallback.filter(F.action == 'to_main_menu'))
async def cb_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üëã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
        reply_markup=inline_keyboards.get_main_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(NavigationCallback.filter(F.action == 'start_search'))
async def cb_start_search(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üîç –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –∞–±–æ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ—à—É–∫—É:")
    await state.set_state(OrderFSM.awaiting_sku_search)
    await callback.answer()


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥—ñ–π –∑ –∫–æ—à–∏–∫–æ–º ---
@router.message(Command("basket"))
async def cmd_basket(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /basket."""
    await show_cart(message, state)

@router.callback_query(CartCallback.filter(F.action == 'show'))
async def cb_show_cart(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫—É '–ú—ñ–π –∫–æ—à–∏–∫'."""
    await show_cart(callback, state)
    await callback.answer()

@router.callback_query(CartCallback.filter(F.action == 'clear'))
async def cb_clear_cart(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫—É '–û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫'."""
    await cart_service.clear_cart(callback.from_user.id)
    await callback.answer("‚úÖ –ö–æ—à–∏–∫ —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ!", show_alert=True)
    await show_cart(callback, state) # –û–Ω–æ–≤–ª—é—î–º–æ –≤–∏–≥–ª—è–¥ –∫–æ—à–∏–∫–∞

@router.callback_query(CartCallback.filter(F.action == 'remove_item'))
async def cb_remove_item_from_cart(callback: CallbackQuery, state: FSMContext, callback_data: CartCallback):
    """–û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫—É '–í–∏–¥–∞–ª–∏—Ç–∏' –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É."""
    item_id_to_remove = callback_data.item_id
    cart_service.remove_item(callback.from_user.id, item_id_to_remove)
    await callback.answer("‚úÖ –ü–æ–∑–∏—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ.", show_alert=False)
    await show_cart(callback, state) # –û–Ω–æ–≤–ª—é—î–º–æ –≤–∏–≥–ª—è–¥ –∫–æ—à–∏–∫–∞

@router.callback_query(CartCallback.filter(F.action == 'edit_item'))
async def cb_edit_item_in_cart(callback: CallbackQuery, state: FSMContext, callback_data: CartCallback):
    """
    –û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫—É '–ó–º—ñ–Ω–∏—Ç–∏' –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É.
    –ü–û–ö–ò –©–û —Ü–µ –∑–∞–≥–ª—É—à–∫–∞, —è–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª—è—î –ø—Ä–æ –º–∞–π–±—É—Ç–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª.
    """
    # –í –º–∞–π–±—É—Ç–Ω—å–æ–º—É —Ç—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞:
    # 1. –û—Ç—Ä–∏–º–∞—Ç–∏ item_id –∑ callback_data
    # 2. –ó–±–µ—Ä–µ–≥—Ç–∏ –π–æ–≥–æ –≤ FSM
    # 3. –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É —Ü—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É –∑–Ω–æ–≤—É
    # 4. –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –≤–∏–±—Ä–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä –∞–±–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
    # 5. –í–∏–∫–ª–∏–∫–∞—Ç–∏ cart_service.update_item()
    await callback.answer("–¶–µ–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.", show_alert=True)
