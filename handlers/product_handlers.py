# handlers/product_handlers.py
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ –Ω–∞—à—ñ –º–æ–¥—É–ª—ñ
from fsm.order_states import OrderFSM
from services import xml_parser, cart_service
from keyboards import inline_keyboards
from keyboards.inline_keyboards import ProductCallback

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ü—å–æ–≥–æ —Ñ–∞–π–ª—É
router = Router()

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ "–ø–ª–∞–≤–∞—é—á–æ—é" –∫–Ω–æ–ø–∫–æ—é
# {user_id: message_id}
# –£–í–ê–ì–ê: —Ü–µ —Å—Ö–æ–≤–∏—â–µ –≤ –ø–∞–º'—è—Ç—ñ, –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –¥–∞–Ω—ñ –∑–Ω–∏–∫–Ω—É—Ç—å.
# –î–ª—è production –º–æ–∂–Ω–∞ –±—É–¥–µ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ Redis –∞–±–æ —ñ–Ω—à–µ –ø–æ—Å—Ç—ñ–π–Ω–µ —Å—Ö–æ–≤–∏—â–µ.
floating_buttons = {}


# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
def render_product_card(product: dict) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –¥–∞–Ω—ñ —Ç–æ–≤–∞—Ä—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ HTML-—Ä–æ–∑–º—ñ—Ç–∫–æ—é."""
    pictures_html = "".join(f"<a href='{url}'>&#8203;</a>" for url in product.get('pictures', []))
    return (
        f"{pictures_html}"
        f"<b>{product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∏')}</b>\n\n"
        f"<b>–¶—ñ–Ω–∞:</b> {product.get('final_price', '–ù–µ –≤–∫–∞–∑–∞–Ω–∞')} –≥—Ä–Ω\n"
        f"<b>–ê—Ä—Ç–∏–∫—É–ª:</b> <code>{product.get('sku', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}</code>\n\n"
        f"<i>{product.get('description', '–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.')}</i>"
    )

async def show_floating_cart_button(message: Message):
    """–°—Ç–≤–æ—Ä—é—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î "–ø–ª–∞–≤–∞—é—á—É" –∫–Ω–æ–ø–∫—É –∫–æ—à–∏–∫–∞."""
    user_id = message.from_user.id
    cart = await cart_service.get_cart(user_id)
    items = cart.get("items", [])
    
    if not items:
        return

    total_sum = sum(item.get('final_price', 0) * item.get('quantity', 1) for item in items)
    keyboard = inline_keyboards.get_floating_cart_keyboard(user_id, total_sum)
    text = f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ. –£ –≤–∞—à–æ–º—É –∫–æ—à–∏–∫—É {len(items)} –ø–æ–∑. –Ω–∞ —Å—É–º—É {total_sum} –≥—Ä–Ω.\n" \
           f"–ö–æ—à–∏–∫ –¥—ñ–π—Å–Ω–∏–π {cart_service.CART_TTL_MINUTES} —Ö–≤–∏–ª–∏–Ω."

    # –Ø–∫—â–æ –º–∏ –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–ª–∏ –∫–Ω–æ–ø–∫—É, —Ä–µ–¥–∞–≥—É—î–º–æ —ó—ó
    if user_id in floating_buttons:
        try:
            await message.bot.edit_message_text(
                text=text,
                chat_id=user_id,
                message_id=floating_buttons[user_id],
                reply_markup=keyboard
            )
            return
        except TelegramBadRequest: # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ –∞–±–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–æ
            del floating_buttons[user_id]

    # –Ø–∫—â–æ –∫–Ω–æ–ø–∫–∏ —â–µ –Ω–µ –±—É–ª–æ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    sent_message = await message.answer(text, reply_markup=keyboard)
    floating_buttons[user_id] = sent_message.message_id


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ ---
@router.message(OrderFSM.awaiting_sku_search, F.text)
async def process_product_search(message: Message, state: FSMContext):
    query = message.text.strip()
    await state.clear()
    found_products = await xml_parser.search_products(query)
    if not found_products:
        await message.answer("üòî –ù–∞ –∂–∞–ª—å, –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    product = found_products[0]
    card_text = render_product_card(product)
    keyboard = inline_keyboards.get_product_card_keyboard(product)
    await message.answer(text=card_text, reply_markup=keyboard)

@router.callback_query(ProductCallback.filter(F.action == 'select_size'))
async def cb_select_size(callback: CallbackQuery, callback_data: ProductCallback, state: FSMContext):
    await state.update_data(
        selected_sku=callback_data.sku,
        selected_offer_id=callback_data.offer_id
    )
    await callback.message.edit_text(
        f"–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –±–∞–∂–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1, 2, 5):",
    )
    await state.set_state(OrderFSM.awaiting_quantity)
    await callback.answer("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å")

@router.message(OrderFSM.awaiting_quantity, F.text)
async def process_quantity(message: Message, state: FSMContext):
    quantity_str = message.text.strip()
    if not quantity_str.isdigit() or int(quantity_str) <= 0:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ (–±—ñ–ª—å—à–µ –Ω—É–ª—è).")
        return
    
    quantity = int(quantity_str)
    user_data = await state.get_data()
    sku = user_data.get('selected_sku')
    offer_id = user_data.get('selected_offer_id')

    if not sku or not offer_id:
        await message.answer("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É.", reply_markup=inline_keyboards.get_main_menu_keyboard())
        await state.clear()
        return

    await cart_service.add_item(
        user_id=message.from_user.id,
        sku=sku,
        offer_id=offer_id,
        quantity=quantity
    )
    
    await state.clear()
    
    # –ü–æ–∫–∞–∑—É—î–º–æ "–ø–ª–∞–≤–∞—é—á—É" –∫–Ω–æ–ø–∫—É
    await show_floating_cart_button(message)
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º—ñ–≥ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=inline_keyboards.get_main_menu_keyboard())