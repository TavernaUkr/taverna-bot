# handlers/order_handlers.py
import re
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.fsm.context import FSMContext

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ, —â–æ –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ
from fsm.order_states import OrderFSM
from keyboards import inline_keyboards, reply_keyboards
# from services import cart_service, mydrop_service, gdrive_service

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ü—å–æ–≥–æ —Ñ–∞–π–ª—É
router = Router()

# --- 1. –ü–æ—á–∞—Ç–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ---
@router.callback_query(F.data == "start_checkout")
async def cb_start_checkout(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
    –°–ø—Ä–∞—Ü—å–æ–≤—É—î –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è" –≤ –∫–æ—à–∏–∫—É.
    """
    # TODO: –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –∫–æ—à–∏–∫ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
    # cart_items = await cart_service.get_cart(callback.from_user.id)
    # if not cart_items:
    #     await callback.answer("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!", show_alert=True)
    #     return

    await callback.message.edit_text("‚úçÔ∏è –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è (–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ):")
    await state.set_state(OrderFSM.awaiting_name)
    await callback.answer()

# --- 2. –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ ---
@router.message(OrderFSM.awaiting_name, F.text)
async def process_name(message: Message, state: FSMContext):
    """–õ–æ–≤–∏—Ç—å –ü–Ü–ë, –≤–∞–ª—ñ–¥—É—î –π–æ–≥–æ —ñ –∑–∞–ø–∏—Ç—É—î –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É."""
    full_name = message.text.strip()
    if len(full_name.split()) < 2:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ–≤–Ω–µ —ñ–º'—è (–º—ñ–Ω—ñ–º—É–º 2 —Å–ª–æ–≤–∞).")
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ "–±–ª–æ–∫–Ω–æ—Ç" FSM
    await state.update_data(customer_name=full_name)
    await message.answer(
        "üìû –î—è–∫—É—é! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.",
        reply_markup=reply_keyboards.get_phone_request_keyboard()
    )
    await state.set_state(OrderFSM.awaiting_phone)

# --- 3. –û–±—Ä–æ–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É ---
@router.message(OrderFSM.awaiting_phone, (F.text | F.contact))
async def process_phone(message: Message, state: FSMContext):
    """–õ–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (—Ç–µ–∫—Å—Ç–æ–º –∞–±–æ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç) —ñ –≤–∞–ª—ñ–¥—É—î."""
    if message.contact:
        phone_number = message.contact.phone_number
    else:
        # –í–∞—à–∞ –Ω–∞–¥—ñ–π–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –∑ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–º –≤–∏—Ä–∞–∑–æ–º
        phone_match = re.match(r'^\+?3?8?(0\d{9})$', message.text.strip())
        if not phone_match:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +380xxxxxxxxx –∞–±–æ 0xxxxxxxxx.")
            return
        phone_number = f"+38{phone_match.group(1)}"
    
    await state.update_data(customer_phone=phone_number)
    
    # –í–∏–¥–∞–ª—è—î–º–æ Reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —Ç–∞ –ø–∏—Ç–∞—î–º–æ –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É
    await message.answer(
        "üöö –ß—É–¥–æ–≤–æ! –í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=reply_keyboards.get_delivery_choice_keyboard()
    )
    await state.set_state(OrderFSM.awaiting_delivery_choice)

# --- 4. –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–æ—Å—Ç–∞–≤–∫–∏ —ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏ (–∫–∞—Ä–∫–∞—Å) ---
# –ü–æ–¥–∞–ª—å—à—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –±—É–¥—É—Ç—å –ø–æ–±—É–¥–æ–≤–∞–Ω—ñ –∑–∞ —Ç–∏–º –∂–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–º
@router.message(OrderFSM.awaiting_delivery_choice, F.text.in_(['–ù–æ–≤–∞ –ü–æ—à—Ç–∞', '–£–∫—Ä–ø–æ—à—Ç–∞']))
async def process_delivery_choice(message: Message, state: FSMContext):
    delivery_type = message.text
    await state.update_data(delivery_type=delivery_type)
    
    # TODO: –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ API –ø–æ—à—Ç–∏
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–∞–ø–∏—Ç –º—ñ—Å—Ç–∞
    await message.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏: {delivery_type}. –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:", reply_markup=reply_keyboards.remove_kb)
    await state.set_state(OrderFSM.awaiting_city)
    
# --- –û—Å—Ç–∞–Ω–Ω—ñ–π –∫—Ä–æ–∫: –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ---
@router.message(OrderFSM.awaiting_confirmation) # –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, –º–∏ –ø–æ—Ç—Ä–∞–ø–∏–ª–∏ —Å—é–¥–∏
async def process_final_confirmation(message: Message, state: FSMContext):
    # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –∑ "–±–ª–æ–∫–Ω–æ—Ç–∞" FSM
    order_data = await state.get_data()
    # cart_items = await cart_service.get_cart(message.from_user.id)
    
    # –§–æ—Ä–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    summary_text = f"""
    ‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –º–∞–π–∂–µ –≥–æ—Ç–æ–≤–µ! –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ:
    
    üë§ **–û—Ç—Ä–∏–º—É–≤–∞—á:** {order_data.get('customer_name')}
    üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {order_data.get('customer_phone')}
    üöö **–î–æ—Å—Ç–∞–≤–∫–∞:** {order_data.get('delivery_type')}
    
    üìù **–¢–æ–≤–∞—Ä–∏:**
    { "–¢—É—Ç –±—É–¥–µ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –∫–æ—à–∏–∫–∞" }
    
    üí∞ **–î–æ —Å–ø–ª–∞—Ç–∏: { "–¢—É—Ç –±—É–¥–µ —Ñ—ñ–Ω–∞–ª—å–Ω–∞ —Å—É–º–∞" }**
    """
    
    await message.answer(summary_text, reply_markup=inline_keyboards.get_order_confirmation_keyboard())

# --- –û–±—Ä–æ–±–∫–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è ---
@router.callback_query(F.data == "confirm_order")
async def cb_confirm_order(callback: CallbackQuery, state: FSMContext):
    # ================== TODO: –ú–ê–ô–ë–£–¢–ù–Ø –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø ==================
    # 1. –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    # 2. –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ MyDrop API (mydrop_service)
    # 3. –°—Ç–≤–æ—Ä–∏—Ç–∏ Google Sheet (gdrive_service)
    # 4. –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
    # 5. –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (cart_service)
    # ===============================================================
    
    await callback.message.edit_text("üéâ –î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ –≤ –æ–±—Ä–æ–±–∫—É. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è.")
    await state.clear() # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    await callback.answer()

@router.callback_query(F.data == "cancel_order")
async def cb_cancel_order(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        reply_markup=inline_keyboards.get_main_menu_keyboard()
    )
    await callback.answer()