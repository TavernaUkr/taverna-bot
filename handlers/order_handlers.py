# handlers/order_handlers.py
import re
import uuid
import logging # –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
from aiogram import Router, F, types, Bot, Dispatcher # –î–æ–¥–∞—î–º–æ Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.fsm.state import State # –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
from aiogram.exceptions import TelegramBadRequest # –î–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è

from fsm.order_states import OrderFSM
from keyboards import inline_keyboards, reply_keyboards
from keyboards.inline_keyboards import CartCallback, PaymentCallback, OrderCallback, BackCallback
from services import (
    cart_service,
    delivery_service,
    payment_service,
    order_service,
    mydrop_service,
    notification_service,
    gdrive_service,
    xml_parser, # –ü–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —á–∞—Å—Ç–∫–æ–≤–æ—ó –æ–ø–ª–∞—Ç–∏
)
from config_reader import config # –ü–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è

logger = logging.getLogger(__name__) # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ª–æ–≥–µ—Ä
router = Router()

# --- –í–∞–ª—ñ–¥–∞—Ü—ñ—è (–±–µ–∑ –∑–º—ñ–Ω) ---
def is_valid_pib(text: str) -> str | None:
    parts = text.strip().split()
    if not (2 <= len(parts) <= 3): return None
    for part in parts:
        if not re.fullmatch(r"[–ê-–Ø“ê–Ñ–Ü–á–∞-—è“ë—î—ñ—ó'\-]+", part): return None
    formatted_parts = [p.capitalize() for p in parts]
    return " ".join(formatted_parts)

def is_valid_phone(text: str) -> str | None:
    digits_only = re.sub(r'\D', '', text)
    match = re.match(r'^(?:380|0)(\d{9})$', digits_only)
    if match: return f"+380{match.group(1)}"
    return None

# --- –ü–æ—á–∞—Ç–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è, –ü–Ü–ë, –¢–µ–ª–µ—Ñ–æ–Ω (–±–µ–∑ –∑–º—ñ–Ω, –∫—Ä—ñ–º –≤–∏–¥–∞–ª–µ–Ω–Ω—è reply –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏) ---
@router.callback_query(CartCallback.filter(F.action == "checkout"))
async def cb_start_checkout(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cart = await cart_service.get_cart(user_id)
    if not cart.get("items"):
        await callback.answer("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!", show_alert=True)
        return
    await callback.message.edit_text("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º'—è:")
    await state.set_state(OrderFSM.awaiting_name)
    await callback.answer()

@router.message(OrderFSM.awaiting_name, F.text)
async def process_name(message: Message, state: FSMContext):
    validated_name = is_valid_pib(message.text)
    if not validated_name:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ.")
        return
    await state.update_data(customer_name=validated_name)
    await message.answer("üìû –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=reply_keyboards.get_phone_request_keyboard())
    await state.set_state(OrderFSM.awaiting_phone)

@router.message(OrderFSM.awaiting_phone, (F.text | F.contact))
async def process_phone(message: Message, state: FSMContext):
    phone_number = message.contact.phone_number if message.contact else message.text
    validated_phone = is_valid_phone(phone_number)
    if not validated_phone:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.")
        return
    await state.update_data(customer_phone=validated_phone)
    msg_to_delete = None
    try:
        sent_msg = await message.answer("üöö –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=inline_keyboards.get_delivery_type_keyboard())
        # –í–∏–¥–∞–ª—è—î–º–æ reply –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, –≤—ñ–¥–ø—Ä–∞–≤–∏–≤—à–∏ –ø–æ—Ä–æ–∂–Ω—é —ñ –≤–∏–¥–∞–ª–∏–≤—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        msg_to_delete = await message.answer("...", reply_markup=reply_keyboards.remove_kb)
        await msg_to_delete.delete()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ reply –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏: {e}")
        if msg_to_delete: try: await msg_to_delete.delete() except: pass
    await state.set_state(OrderFSM.awaiting_delivery_choice)


# --- –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" ---
@router.callback_query(BackCallback.filter())
async def process_back_button(callback: CallbackQuery, state: FSMContext, callback_data: BackCallback, dp: Dispatcher): # –î–æ–¥–∞–ª–∏ dp
    target_state_str = callback_data.to
    current_state_str = (await state.get_state())

    # –õ–æ–≥—ñ–∫–∞ –¥–ª—è "previous_delivery_step"
    if target_state_str == 'previous_delivery_step':
        user_data = await state.get_data()
        delivery_type = user_data.get('delivery_type')
        if delivery_type == 'branch':
            service = user_data.get('delivery_service')
            if service == '–ù–æ–≤–∞ –ü–æ—à—Ç–∞': target_state_str = OrderFSM.awaiting_np_warehouse.state
            elif service == '–£–∫—Ä–ø–æ—à—Ç–∞': target_state_str = OrderFSM.awaiting_ukrposhta_address.state
            else: target_state_str = OrderFSM.awaiting_delivery_service.state
        elif delivery_type == 'courier': target_state_str = OrderFSM.awaiting_courier_address.state
        else: target_state_str = OrderFSM.awaiting_delivery_choice.state # –°–∞–º–æ–≤–∏–≤—ñ–∑ –∞–±–æ –ø–æ–º–∏–ª–∫–∞

    # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    if target_state_str == 'main_menu':
        await state.clear()
        try: await callback.message.edit_text("üëã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=inline_keyboards.get_main_menu_keyboard())
        except TelegramBadRequest:
             await callback.message.answer("üëã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=inline_keyboards.get_main_menu_keyboard())
             try: await callback.message.delete()
             except: pass
        await callback.answer("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.")
        return

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ–±'—î–∫—Ç State –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é states_map_inv
    target_state: State | None = OrderFSM.states_map_inv.get(target_state_str)

    if target_state is None:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Å—Ç–∞–Ω '{target_state_str}' –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'")
        await state.clear()
        await callback.message.edit_text("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó. –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=inline_keyboards.get_main_menu_keyboard())
        await callback.answer("–ü–æ–º–∏–ª–∫–∞", show_alert=True)
        return

    # --- –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä ---
    await state.set_state(target_state)
    message_text = "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫—Ä–æ–∫—É.\n\n"
    reply_markup = None
    edit_mode = True

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–∫—Å—Ç —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
    if target_state == OrderFSM.awaiting_name: message_text += "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë:"
    elif target_state == OrderFSM.awaiting_phone:
        message_text += "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:"; reply_markup = reply_keyboards.get_phone_request_keyboard(); edit_mode = False
    elif target_state == OrderFSM.awaiting_delivery_choice:
        message_text += "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏:"; reply_markup = inline_keyboards.get_delivery_type_keyboard()
    elif target_state == OrderFSM.awaiting_delivery_service:
        message_text += "–û–±–µ—Ä—ñ—Ç—å —Å–ª—É–∂–±—É –¥–æ—Å—Ç–∞–≤–∫–∏:"; reply_markup = inline_keyboards.get_delivery_service_keyboard()
    elif target_state == OrderFSM.awaiting_city: message_text += "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É (–¥–ª—è –ù–ü):"
    elif target_state == OrderFSM.awaiting_np_warehouse: message_text += "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–±–æ –∞–¥—Ä–µ—Å—É –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–ü:"
    elif target_state == OrderFSM.awaiting_ukrposhta_address: message_text += "–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É –¥–ª—è –£–∫—Ä–ø–æ—à—Ç–∏ (—ñ–Ω–¥–µ–∫—Å, –º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –¥—ñ–º):"
    elif target_state == OrderFSM.awaiting_courier_address: message_text += "–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–ª—è –∫—É—Ä'—î—Ä–∞ (–º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –¥—ñ–º):"
    elif target_state == OrderFSM.awaiting_payment_choice:
        message_text += "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:"; reply_markup = inline_keyboards.get_payment_method_keyboard()
    elif target_state == OrderFSM.awaiting_notes:
        message_text += "–î–æ–¥–∞–π—Ç–µ –ø—Ä–∏–º—ñ—Ç–∫—É –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å:"; reply_markup = inline_keyboards.get_skip_notes_keyboard()
    else: message_text += "–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ." # Generic

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–±–æ —Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        if edit_mode: await callback.message.edit_text(message_text, reply_markup=reply_markup)
        else:
            try: await callback.message.delete() # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ inline
            except: pass # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ
            await callback.message.answer(message_text, reply_markup=reply_markup) # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –∑ reply
    except TelegramBadRequest as e:
        logger.warning(f"–ü–æ–º–∏–ª–∫–∞ edit/send '–ù–∞–∑–∞–¥': {e}. –°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–≤–µ.")
        try:
            await callback.message.answer(message_text, reply_markup=reply_markup)
            try: await callback.message.delete() # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–µ
            except: pass
        except Exception as inner_e: logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–≤–µ '–ù–∞–∑–∞–¥': {inner_e}")
    await callback.answer("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥")


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –≤–∏–±–æ—Ä—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–û–ù–û–í–õ–ï–ù–û) ---

@router.callback_query(F.data.startswith("delivery_type:"), OrderFSM.awaiting_delivery_choice)
async def select_delivery_type(callback: CallbackQuery, state: FSMContext):
    delivery_type = callback.data.split(":")[1]
    await state.update_data(delivery_type=delivery_type)
    if delivery_type == 'branch':
        await callback.message.edit_text("–û–±–µ—Ä—ñ—Ç—å —Å–ª—É–∂–±—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=inline_keyboards.get_delivery_service_keyboard())
        await state.set_state(OrderFSM.awaiting_delivery_service)
    elif delivery_type == 'courier':
        await state.update_data(delivery_service="–ö—É—Ä'—î—Ä –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏") # TODO: –î–æ–¥–∞—Ç–∏ –≤–∏–±—ñ—Ä —Å–ª—É–∂–±–∏
        await callback.message.edit_text("üè† –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∫—É—Ä'—î—Ä–∞ (–º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –¥—ñ–º):")
        await state.set_state(OrderFSM.awaiting_courier_address)
    elif delivery_type == 'pickup':
        await state.update_data(delivery_service="–°–∞–º–æ–≤–∏–≤—ñ–∑", delivery_city_name="–°–∞–º–æ–≤–∏–≤—ñ–∑", delivery_warehouse="–ó–∞ –¢–¢–ù")
        await callback.message.edit_text("‚úÖ –°–∞–º–æ–≤–∏–≤—ñ–∑.\n–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:", reply_markup=inline_keyboards.get_payment_method_keyboard())
        await state.set_state(OrderFSM.awaiting_payment_choice)
    await callback.answer()

@router.callback_query(F.data.startswith("delivery_service:"), OrderFSM.awaiting_delivery_service)
async def select_delivery_service(callback: CallbackQuery, state: FSMContext):
    service = callback.data.split(":")[1]; message_text, next_state = "", None
    if service == 'np':
        await state.update_data(delivery_service="–ù–æ–≤–∞ –ü–æ—à—Ç–∞")
        message_text = "üèôÔ∏è –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ:"; next_state = OrderFSM.awaiting_city
    elif service == 'ukrpost':
        await state.update_data(delivery_service="–£–∫—Ä–ø–æ—à—Ç–∞")
        message_text = "üì¨ –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É (—ñ–Ω–¥–µ–∫—Å, –º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –¥—ñ–º):"; next_state = OrderFSM.awaiting_ukrposhta_address
    else: await callback.answer("–ù–µ–≤—ñ–¥–æ–º–∞ —Å–ª—É–∂–±–∞."); return
    await callback.message.edit_text(message_text); await state.set_state(next_state); await callback.answer()

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –ù–ü (–±–µ–∑ –∑–º—ñ–Ω)
@router.message(OrderFSM.awaiting_city, F.text)
async def process_city_np(message: Message, state: FSMContext):
    cities = await delivery_service.find_np_city(message.text)
    if not cities: await message.answer("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."); return
    selected_city = cities[0]; city_name = selected_city.get("Present"); city_ref = selected_city.get("Ref")
    await state.update_data(delivery_city_name=city_name, delivery_city_ref=city_ref)
    await message.answer(f"‚úÖ –ú—ñ—Å—Ç–æ: {city_name}.\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä/–∞–¥—Ä–µ—Å—É –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:"); await state.set_state(OrderFSM.awaiting_np_warehouse)

@router.message(OrderFSM.awaiting_np_warehouse, F.text)
async def process_warehouse_np(message: Message, state: FSMContext):
    user_data = await state.get_data(); city_ref = user_data.get("delivery_city_ref")
    warehouses = await delivery_service.find_np_warehouses(city_ref, message.text)
    if not warehouses: await message.answer("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."); return
    selected_warehouse = warehouses[0]; warehouse_desc = selected_warehouse.get("Description")
    await state.update_data(delivery_warehouse=warehouse_desc)
    await message.answer(f"‚úÖ –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: {warehouse_desc}.\n–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:", reply_markup=inline_keyboards.get_payment_method_keyboard()); await state.set_state(OrderFSM.awaiting_payment_choice)

# –û–±—Ä–æ–±–Ω–∏–∫ –∞–¥—Ä–µ—Å–∏ –¥–ª—è –£–∫—Ä–ø–æ—à—Ç–∏
@router.message(OrderFSM.awaiting_ukrposhta_address, F.text)
async def process_ukrposhta_address(message: Message, state: FSMContext):
    address = message.text.strip()
    # –ü–æ—Å–∏–ª—é—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É: 5 —Ü–∏—Ñ—Ä —ñ–Ω–¥–µ–∫—Å—É –Ω–∞ –ø–æ—á–∞—Ç–∫—É, –ø–æ—Ç—ñ–º —Ö–æ—á–∞ –± 2 —Å–ª–æ–≤–∞
    if not re.match(r'^\d{5}\s+\S+\s+\S+', address):
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ü–Ω–¥–µ–∫—Å –ú—ñ—Å—Ç–æ –í—É–ª–∏—Ü—è –î—ñ–º (–Ω–∞–ø—Ä., 58000 –ß–µ—Ä–Ω—ñ–≤—Ü—ñ –ì–æ–ª–æ–≤–Ω–∞ 1)")
        return
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º—ñ—Å—Ç–æ –æ–∫—Ä–µ–º–æ, —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ (–±–µ—Ä–µ–º–æ –¥—Ä—É–≥–µ —Å–ª–æ–≤–æ)
    parts = address.split()
    city_name = parts[1] if len(parts) > 1 else "–£–∫—Ä–ø–æ—à—Ç–∞"
    await state.update_data(delivery_city_name=city_name, delivery_warehouse=address)
    await message.answer("‚úÖ –ê–¥—Ä–µ—Å—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ.\n–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:", reply_markup=inline_keyboards.get_payment_method_keyboard())
    await state.set_state(OrderFSM.awaiting_payment_choice)

# –û–±—Ä–æ–±–Ω–∏–∫ –∞–¥—Ä–µ—Å–∏ –¥–ª—è –∫—É—Ä'—î—Ä–∞
@router.message(OrderFSM.awaiting_courier_address, F.text)
async def process_courier_address(message: Message, state: FSMContext):
    address = message.text.strip()
    if len(address.split()) < 3:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É (–ú—ñ—Å—Ç–æ –í—É–ª–∏—Ü—è –î—ñ–º).")
        return
    parts = address.split(maxsplit=1); city = parts[0]; street_house = parts[1] if len(parts) > 1 else ""
    await state.update_data(delivery_city_name=city, delivery_warehouse=f"–ö—É—Ä'—î—Ä: {street_house}")
    await message.answer("‚úÖ –ê–¥—Ä–µ—Å—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ.\n–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:", reply_markup=inline_keyboards.get_payment_method_keyboard())
    await state.set_state(OrderFSM.awaiting_payment_choice)


# --- –û–±—Ä–æ–±–∫–∞ –æ–ø–ª–∞—Ç–∏, –ø—Ä–∏–º—ñ—Ç–æ–∫, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (–û–ù–û–í–õ–ï–ù–û –∑ –∫–Ω–æ–ø–∫–æ—é –ù–∞–∑–∞–¥) ---

@router.callback_query(PaymentCallback.filter(), OrderFSM.awaiting_payment_choice)
async def process_payment_choice(callback: CallbackQuery, callback_data: PaymentCallback, state: FSMContext):
    user_id = callback.from_user.id; payment_method = callback_data.method
    await state.update_data(payment_method=payment_method)
    cart = await cart_service.get_cart(user_id); total_sum = sum(item['final_price'] * item['quantity'] for item in cart.get("items", []))
    order_id = str(uuid.uuid4().hex[:10]); await state.update_data(order_id=order_id)

    if payment_method == 'cod':
        await state.update_data(payment_display_name="–ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂")
        await callback.message.edit_text("‚úçÔ∏è –î–æ–¥–∞–π—Ç–µ –ø—Ä–∏–º—ñ—Ç–∫—É –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å:", reply_markup=inline_keyboards.get_skip_notes_keyboard())
        await state.set_state(OrderFSM.awaiting_notes)
    elif payment_method in ['full', 'partial']:
        amount_to_pay, payment_display_name = 0, ""
        if payment_method == 'full': amount_to_pay = total_sum; payment_display_name = "–ü–æ–≤–Ω–∞ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞"
        else: # partial
            try:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ _aggressive_rounding –∑ xml_parser
                partial_sum = sum(xml_parser._aggressive_rounding(Decimal(item['final_price']) / Decimal('1.33') * Decimal('0.33')) * item['quantity'] for item in cart.get("items", []) if isinstance(item['final_price'], (int, float)) or str(item.get('final_price','')).isdigit()) # –î–æ–¥–∞–Ω–æ get
                amount_to_pay = partial_sum if partial_sum > 0 else int(total_sum * 0.33)
            except Exception as e: logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —á–∞—Å—Ç–∫–æ–≤–æ—ó –æ–ø–ª–∞—Ç–∏: {e}"); amount_to_pay = int(total_sum * 0.33)
            payment_display_name = "–ß–∞—Å—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞"
        await state.update_data(payment_display_name=payment_display_name)
        payment_link = await payment_service.create_payment_link(order_id, amount_to_pay, f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}")
        if not payment_link: await callback.answer("–ü–æ–º–∏–ª–∫–∞ –æ–ø–ª–∞—Ç–∏.", show_alert=True); return
        keyboard = inline_keyboards.get_payment_url_keyboard(payment_link, order_id)
        await callback.message.edit_text(f"–°—É–º–∞: {amount_to_pay} –≥—Ä–Ω. –û–ø–ª–∞—Ç—ñ—Ç—å —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–Ø –æ–ø–ª–∞—Ç–∏–≤(-–ª–∞)'.", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(OrderCallback.filter(F.action == 'check_payment'), OrderFSM.awaiting_payment_choice)
async def check_payment(callback: CallbackQuery, callback_data: OrderCallback, state: FSMContext):
    is_paid = await payment_service.check_payment_status(callback_data.order_id)
    if is_paid:
        await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞!", show_alert=True)
        await callback.message.edit_text("‚úçÔ∏è –î–æ–¥–∞–π—Ç–µ –ø—Ä–∏–º—ñ—Ç–∫—É –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å:", reply_markup=inline_keyboards.get_skip_notes_keyboard())
        await state.set_state(OrderFSM.awaiting_notes)
    else: await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ —â–µ –Ω–µ –Ω–∞–¥—ñ–π—à–ª–∞.", show_alert=True)

@router.callback_query(F.data == "notes:skip", OrderFSM.awaiting_notes)
async def process_skip_notes(callback: CallbackQuery, state: FSMContext):
    await state.update_data(notes=None)
    await show_final_confirmation(callback, state) # –ü–µ—Ä–µ–¥–∞—î–º–æ callback
    await callback.answer()

@router.message(OrderFSM.awaiting_notes, F.text)
async def process_notes(message: Message, state: FSMContext):
    await state.update_data(notes=message.text)
    await show_final_confirmation(message, state)

# –§—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∞–∑—É —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (–û–ù–û–í–õ–ï–ù–û)
async def show_final_confirmation(target: types.Message | types.CallbackQuery, state: FSMContext):
    user_id = target.from_user.id
    message = target.message if isinstance(target, types.CallbackQuery) else target

    user_data = await state.get_data(); cart = await cart_service.get_cart(user_id)
    cart_items = cart.get("items", []); total_sum = sum(item['final_price'] * item['quantity'] for item in cart_items)
    items_text = "".join([f"‚ñ™Ô∏è {item['name']} ({item['size']}) - {item['quantity']} —à—Ç. x {item['final_price']} –≥—Ä–Ω\n" for item in cart_items])

    delivery_details = ""; delivery_service_name = user_data.get('delivery_service', '–ù–µ –æ–±—Ä–∞–Ω–æ')
    delivery_city = user_data.get('delivery_city_name', ''); delivery_warehouse = user_data.get('delivery_warehouse', '')
    if delivery_service_name == "–°–∞–º–æ–≤–∏–≤—ñ–∑": delivery_details = f"üè¢ <b>–°–ø–æ—Å—ñ–±:</b> {delivery_service_name}"
    elif "–ö—É—Ä'—î—Ä" in delivery_service_name: delivery_details = f"üè† <b>–°–ø–æ—Å—ñ–±:</b> {delivery_service_name}\nüìç <b>–ê–¥—Ä–µ—Å–∞:</b> {delivery_city}, {delivery_warehouse.replace('–ö—É—Ä—î—Ä: ', '')}" # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å
    elif delivery_service_name == "–£–∫—Ä–ø–æ—à—Ç–∞": delivery_details = f"üì¨ <b>–°–ª—É–∂–±–∞:</b> {delivery_service_name}\nüìç <b>–ê–¥—Ä–µ—Å–∞:</b> {delivery_warehouse}"
    elif delivery_service_name == "–ù–æ–≤–∞ –ü–æ—à—Ç–∞": delivery_details = f"üöö <b>–°–ª—É–∂–±–∞:</b> {delivery_service_name}\nüìç <b>–ú—ñ—Å—Ç–æ:</b> {delivery_city}\nüè§ <b>–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:</b> {delivery_warehouse}"
    else: delivery_details = "üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> –ù–µ –≤–∫–∞–∑–∞–Ω–æ"

    summary_text = f"""
    <b>‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>

    üë§ <b>–û—Ç—Ä–∏–º—É–≤–∞—á:</b> {user_data.get('customer_name')}
    üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data.get('customer_phone')}

    {delivery_details}

    üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {user_data.get('payment_display_name', '–ù–µ –æ–±—Ä–∞–Ω–æ')}
    üìù <b>–ü—Ä–∏–º—ñ—Ç–∫–∞:</b> {user_data.get('notes', '–Ω–µ–º–∞—î')}

    üõí <b>–¢–æ–≤–∞—Ä–∏:</b>
{items_text}
    üí∞ <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_sum} –≥—Ä–Ω</b>
    """
    keyboard = inline_keyboards.get_final_confirmation_keyboard(user_data.get('order_id'))
    try:
        if isinstance(target, types.CallbackQuery): await message.edit_text(summary_text, reply_markup=keyboard)
        else: await message.answer(summary_text, reply_markup=keyboard)
    except TelegramBadRequest as e:
        logger.warning(f"–ü–æ–º–∏–ª–∫–∞ edit confirm: {e}. –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        await message.answer(summary_text, reply_markup=keyboard)
    await state.set_state(OrderFSM.awaiting_confirmation)

# –§—ñ–Ω–∞–ª—å–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è (–±–µ–∑ –∑–º—ñ–Ω)
@router.callback_query(OrderCallback.filter(F.action == 'confirm'), OrderFSM.awaiting_confirmation)
async def final_confirm(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.message.edit_text("‚è≥ –û–±—Ä–æ–±–ª—è—î–º–æ...")
    user_data = await state.get_data(); cart = await cart_service.get_cart(callback.from_user.id)
    order_id = user_data.get('order_id'); supplier_name = "Landliz Drop" # TODO: –î–∏–Ω–∞–º—ñ—á–Ω–æ
    full_order_data = {**user_data, "order_id": order_id, "cart": cart, "supplier_name": supplier_name, "customer_id": callback.from_user.id}
    mydrop_response = await mydrop_service.create_order(full_order_data)
    if mydrop_response.get("success"): ttn = mydrop_response.get("ttn"); full_order_data['ttn'] = ttn # –¢–µ–ø–µ—Ä ttn —Ü–µ —Å–ª–æ–≤–Ω–∏–∫
    else: await callback.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."); return
    filename = order_service.generate_order_filename(order_id, user_data.get('customer_name'))
    txt_content = order_service.format_order_to_txt(full_order_data)
    if config.use_gdrive:
        try:
             # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ photo_filename —è–∫ —ñ–º'—è –¥–ª—è .txt —Ñ–∞–π–ª—É
             await gdrive_service.save_order_txt(txt_content.encode('utf-8'), filename=filename) # –ü–æ—Ç—Ä—ñ–±–Ω–∞ –Ω–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤ gdrive_service
        except Exception as e: logger.error(f"–ü–æ–º–∏–ª–∫–∞ GDrive TXT: {e}")
    await notification_service.send_new_order_notifications(bot, full_order_data, txt_content, filename)
    await state.clear(); await cart_service.clear_cart(callback.from_user.id)
    try: await callback.message.delete()
    except: pass
    await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!")

@router.callback_query(OrderCallback.filter(F.action == 'cancel'), OrderFSM.awaiting_confirmation)
async def final_cancel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=inline_keyboards.get_main_menu_keyboard())
    await callback.answer()