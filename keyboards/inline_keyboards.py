# keyboards/inline_keyboards.py
import re
from typing import List
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ FSM, —â–æ–± –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∑–Ω–∞–ª–∞, –∫—É–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—å
from fsm import order_states
from config_reader import config

# --- –§–∞–±—Ä–∏–∫–∏ CallbackData ---
class ProductCallback(CallbackData, prefix="prod"):
    action: str
    sku: str
    offer_id: str

class CartCallback(CallbackData, prefix="cart"):
    action: str
    item_id: str | None = None

class NavigationCallback(CallbackData, prefix="nav"):
    action: str

class OrderCallback(CallbackData, prefix="order"):
    action: str
    order_id: str | None = None

class PaymentCallback(CallbackData, prefix="payment"):
    method: str

# –ù–û–í–ê –§–∞–±—Ä–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
class BackCallback(CallbackData, prefix="back"):
    to: str # –ù–∞–∑–≤–∞ —Å—Ç–∞–Ω—É FSM –∞–±–æ —Å–ø–µ—Ü. –º–∞—Ä–∫–µ—Ä ('main_menu', 'previous_delivery_step')

# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ---

def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üõçÔ∏è –í–∏–±—Ä–∞—Ç–∏ —Ç–æ–≤–∞—Ä –Ω–∞ –∫–∞–Ω–∞–ª—ñ", url=config.main_channel_url)
    builder.button(text="üîé –ó–Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –ø–æ –Ω–∞–∑–≤—ñ/–∞—Ä—Ç–∏–∫—É–ª—É", callback_data=NavigationCallback(action="start_search").pack())
    builder.button(text="üõí –ú—ñ–π –∫–æ—à–∏–∫", callback_data=CartCallback(action="show").pack())
    builder.adjust(1)
    return builder.as_markup()

def get_product_card_keyboard(product: dict) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    available_offers = [offer for offer in product.get('offers', []) if offer.get('available')]
    numeric_sizes, text_sizes = [], []
    for offer in available_offers:
        size = offer.get('size', 'N/A')
        numeric_part_match = re.match(r'^(\d+)', size)
        if numeric_part_match:
            numeric_sizes.append((int(numeric_part_match.group(1)), size, offer.get('offer_id')))
        else:
            text_sizes.append((size, offer.get('offer_id')))
    numeric_sizes.sort(); text_sizes.sort()
    sorted_offers = [(size, offer_id) for _, size, offer_id in numeric_sizes] + text_sizes
    for size, offer_id in sorted_offers:
        callback_data = ProductCallback(action='select_size', sku=product['sku'], offer_id=offer_id).pack()
        builder.button(text=size, callback_data=callback_data)
    builder.adjust(3)
    # –ó–ú–Ü–ù–ï–ù–û: –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –≤–µ–¥–µ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    builder.row(builder.button(text="‚¨ÖÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=BackCallback(to='main_menu').pack()))
    return builder.as_markup()


def get_cart_view_keyboard(cart_items: List[dict]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    total_sum = sum(item.get('final_price', 0) * item.get('quantity', 1) for item in cart_items)
    if cart_items:
        for item in cart_items:
            item_id = item.get('item_id'); item_text = f"‚öôÔ∏è {item.get('name')} ({item.get('size')})"
            builder.button(text=item_text, callback_data="do_nothing") # Placeholder
            builder.row(
                builder.button(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç–∏", callback_data=f"checkout_item:{item_id}"), # Placeholder
                builder.button(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏", callback_data=CartCallback(action='edit_item', item_id=item_id).pack()),
                builder.button(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=CartCallback(action='remove_item', item_id=item_id).pack())
            )
    if cart_items:
        builder.row(builder.button(text=f"‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –≤—Å–µ ({total_sum} –≥—Ä–Ω)", callback_data=CartCallback(action="checkout").pack()))
        builder.row(builder.button(text="üóë –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", callback_data=CartCallback(action="clear").pack()))
    # –ó–ú–Ü–ù–ï–ù–û: –ö–Ω–æ–ø–∫–∞ –≤–µ–¥–µ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    builder.row(builder.button(text="üõçÔ∏è –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data=BackCallback(to='main_menu').pack()))
    return builder.as_markup()

def get_floating_cart_keyboard(user_id: int, total_sum: int, is_checkout: bool = False, checkout_sum: int = 0) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder(); text = f"üõí –í–∞—à –∫–æ—à–∏–∫ - –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_sum} –≥—Ä–Ω"
    if is_checkout and checkout_sum > 0: text += f" | –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è: {checkout_sum} –≥—Ä–Ω"
    builder.button(text=text, callback_data=CartCallback(action='show').pack())
    return builder.as_markup()

# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–û–ù–û–í–õ–ï–ù–û –∑ –∫–Ω–æ–ø–∫–æ—é "–ù–∞–∑–∞–¥") ---

def get_delivery_type_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üöö –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è", callback_data="delivery_type:branch")
    builder.button(text="üè† –î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä'—î—Ä–æ–º", callback_data="delivery_type:courier")
    builder.button(text="üè¢ –°–∞–º–æ–≤–∏–≤—ñ–∑ (–ø–æ –¢–¢–ù)", callback_data="delivery_type:pickup")
    # –ù–∞–∑–∞–¥ –¥–æ —Å—Ç–∞–Ω—É –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=BackCallback(to=order_states.OrderFSM.awaiting_phone.state).pack())
    builder.adjust(1)
    return builder.as_markup()

def get_delivery_service_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="<–ù–æ–≤–∞ –ü–æ—à—Ç–∞>", callback_data="delivery_service:np")
    builder.button(text="<–£–∫—Ä–ø–æ—à—Ç–∞>", callback_data="delivery_service:ukrpost")
    # TODO: –î–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ —Å–ª—É–∂–±–∏
    # –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –¥–æ—Å—Ç–∞–≤–∫–∏
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=BackCallback(to=order_states.OrderFSM.awaiting_delivery_choice.state).pack())
    builder.adjust(2, 1)
    return builder.as_markup()

def get_payment_method_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üíµ –ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂", callback_data=PaymentCallback(method='cod').pack())
    builder.button(text="üí≥ –ü–æ–≤–Ω–∞ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞", callback_data=PaymentCallback(method='full').pack())
    builder.button(text="üí∏ –ß–∞—Å—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ (33%)", callback_data=PaymentCallback(method='partial').pack())
    # –ù–∞–∑–∞–¥ –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫—Ä–æ–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏ (—Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –º–∞—Ä–∫–µ—Ä)
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=BackCallback(to='previous_delivery_step').pack())
    builder.adjust(1)
    return builder.as_markup()

def get_payment_url_keyboard(payment_url: str, order_id: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üëâ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏ üëà", url=payment_url)
    builder.button(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–≤(-–ª–∞)", callback_data=OrderCallback(action='check_payment', order_id=order_id).pack())
    # –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç–∏
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=BackCallback(to=order_states.OrderFSM.awaiting_payment_choice.state).pack())
    builder.adjust(1)
    return builder.as_markup()

def get_skip_notes_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="notes:skip")
    # –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –æ–ø–ª–∞—Ç–∏
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=BackCallback(to=order_states.OrderFSM.awaiting_payment_choice.state).pack())
    builder.adjust(1)
    return builder.as_markup()

def get_final_confirmation_keyboard(order_id: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –í—Å–µ –≤—ñ—Ä–Ω–æ, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=OrderCallback(action='confirm', order_id=order_id).pack())
    # –ù–∞–∑–∞–¥ –¥–æ –ø—Ä–∏–º—ñ—Ç–æ–∫
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=BackCallback(to=order_states.OrderFSM.awaiting_notes.state).pack())
    builder.button(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=OrderCallback(action='cancel').pack())
    builder.adjust(1)
    return builder.as_markup()