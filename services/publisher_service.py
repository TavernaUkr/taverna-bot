# services/publisher_service.py
import logging
import re
import io
import asyncio
import random
from datetime import datetime
from telethon.tl.types import Message
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ –Ω–∞—à—ñ —Å–µ—Ä–≤—ñ—Å–∏ —Ç–∞ –∫–æ–Ω—Ñ—ñ–≥
from config_reader import config
from services import gemini_service, xml_parser, gdrive_service

logger = logging.getLogger(__name__)

# --- –†–æ–±–æ—Ç–∞ –∑ ID –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤ ---
POSTED_IDS = set()

def load_posted_ids():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î ID –≤–∂–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤ –∑ —Ñ–∞–π–ª—É."""
    global POSTED_IDS
    try:
        with open(config.posted_ids_file_path, "r") as f:
            POSTED_IDS = {line.strip() for line in f if line.strip()}
        logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(POSTED_IDS)} ID —Ä–∞–Ω—ñ—à–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤.")
    except FileNotFoundError:
        logger.warning(f"–§–∞–π–ª {config.posted_ids_file_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É posted_ids: {e}")

def save_posted_id(unique_post_id: str):
    """–ó–±–µ—Ä—ñ–≥–∞—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –ø–æ—Å—Ç–∞ —É —Ñ–∞–π–ª —Ç–∞ –≤ set, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤."""
    if unique_post_id not in POSTED_IDS:
        POSTED_IDS.add(unique_post_id)
        try:
            with open(config.posted_ids_file_path, "a") as f:
                f.write(f"{unique_post_id}\n")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ID –ø–æ—Å—Ç–∞ {unique_post_id} —É —Ñ–∞–π–ª: {e}")

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ ID –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
load_posted_ids()


# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---

def _extract_sku(text: str) -> str | None:
    """–ù–∞–¥—ñ–π–Ω–æ –≤–∏—Ç—è–≥—É—î –∞—Ä—Ç–∏–∫—É–ª –∑ —Ç–µ–∫—Å—Ç—É –ø–æ—Å—Ç–∞, —à—É–∫–∞—é—á–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞."""
    # –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ —à—É–∫–∞—î —Å–ª–æ–≤–∞ "–ê—Ä—Ç–∏–∫—É–ª", "–ö–æ–¥", "–ê—Ä—Ç", "SKU" (–Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–≥—ñ—Å—Ç—Ä—É)
    # —Ç–∞ –±–µ—Ä–µ –Ω–∞—Å—Ç—É–ø–Ω–µ –∑–∞ –Ω–∏–º–∏ —Å–ª–æ–≤–æ (–ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤ –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤)
    match = re.search(r'(?i)(–ê—Ä—Ç–∏–∫—É–ª|–ö–æ–¥|–ê—Ä—Ç|SKU):\s*([^\s,]+)', text)
    if match:
        # –û—á–∏—â—É—î–º–æ –∞—Ä—Ç–∏–∫—É–ª –≤—ñ–¥ –º–æ–∂–ª–∏–≤–∏—Ö –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ –≤ –∫—ñ–Ω—Ü—ñ
        return match.group(2).strip().rstrip('.')
    return None

def _create_order_button(sku: str) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î "–º–∞–≥—ñ—á–Ω—É" –∫–Ω–æ–ø–∫—É "–ó–∞–º–æ–≤–∏—Ç–∏" –∑ deep-link."""
    bot_url = f"https://t.me/{config.bot_username}?start={sku}"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üõí –ó–∞–º–æ–≤–∏—Ç–∏", url=bot_url)]
        ]
    )
    return keyboard


# --- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó ---

async def process_and_publish_post(bot: Bot, telethon_message: Message, is_new_post: bool):
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è. –ü—Ä–∏–π–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –æ–±—Ä–æ–±–ª—è—î —Ç–∞ –ø—É–±–ª—ñ–∫—É—î –≤ –∫–∞–Ω–∞–ª.
    """
    unique_post_id = f"{telethon_message.chat_id}_{telethon_message.id}"
    if unique_post_id in POSTED_IDS:
        logger.info(f"–ü–æ—Å—Ç {unique_post_id} –≤–∂–µ –±—É–ª–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")
        return

    original_text = telethon_message.text
    if not original_text or not telethon_message.photo:
        logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {unique_post_id} –±–µ–∑ —Ç–µ–∫—Å—Ç—É –∞–±–æ —Ñ–æ—Ç–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")
        return

    # 1. –í–∏—Ç—è–≥—É—î–º–æ –∞—Ä—Ç–∏–∫—É–ª
    sku = _extract_sku(original_text)
    if not sku:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª –≤ –ø–æ—Å—Ç—ñ {unique_post_id}. –¢–µ–∫—Å—Ç: '{original_text[:70]}...'")
        return

    # 2. –®—É–∫–∞—î–º–æ —Ç–æ–≤–∞—Ä –≤ XML-–∫–µ—à—ñ
    product_data = await xml_parser.get_product_by_sku(sku)
    if not product_data:
        logger.warning(f"–¢–æ–≤–∞—Ä –∑ –∞—Ä—Ç–∏–∫—É–ª–æ–º {sku} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ XML. –ü–æ—Å—Ç {unique_post_id} –Ω–µ –±—É–¥–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")
        return
        
    logger.info(f"–û–±—Ä–æ–±–∫–∞ –ø–æ—Å—Ç–∞ {unique_post_id} –∑ –∞—Ä—Ç–∏–∫—É–ª–æ–º {sku}...")
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É
    delay = random.uniform(1*60, 10*60) if is_new_post else random.uniform(5*60, 30*60)
    logger.info(f"–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é –ø–æ—Å—Ç–∞ {unique_post_id} —á–µ—Ä–µ–∑ {delay/60:.2f} —Ö–≤.")
    await asyncio.sleep(delay)

    # 3. –ü–µ—Ä–µ–ø–∏—Å—É—î–º–æ —Ç–µ–∫—Å—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Gemini
    rewritten_text = await gemini_service.rewrite_post_text(original_text)

    # 4. –§–æ—Ä–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç—É
    final_caption = (
        f"<b>{product_data['name']}</b>\n\n"
        f"{rewritten_text}\n\n"
        f"<b>–ê—Ä—Ç–∏–∫—É–ª:</b> <code>{sku}</code>\n"
        f"<b>–¶—ñ–Ω–∞:</b> {product_data['final_price']} –≥—Ä–Ω"
    )

    # 5. –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É "–ó–∞–º–æ–≤–∏—Ç–∏"
    order_keyboard = _create_order_button(sku)
    
    # 6. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ –≤ –ø–∞–º'—è—Ç—å
    image_bytes_io = io.BytesIO()
    await telethon_message.download_media(file=image_bytes_io)
    image_bytes_io.seek(0) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫—É—Ä—Å–æ—Ä –Ω–∞ –ø–æ—á–∞—Ç–æ–∫

    # 7. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞ Google Drive (—è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ)
    if config.use_gdrive:
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è –¥–ª—è —Ñ–∞–π–ª—É
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            photo_filename = f"{sku}_{timestamp}.jpg"
            text_filename = f"{sku}_{timestamp}.txt"
            
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Å–µ—Ä–≤—ñ—Å –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
            await gdrive_service.save_post_files(
                post_text=final_caption,
                image_bytes=image_bytes_io.getvalue(),
                photo_filename=photo_filename,
                text_filename=text_filename
            )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–æ—Å—Ç–∞ {sku} –Ω–∞ Google Drive: {e}")
        finally:
            image_bytes_io.seek(0) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram

    # 8. –ü—É–±–ª—ñ–∫—É—î–º–æ –≤ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–∞–Ω–∞–ª
    try:
        await bot.send_photo(
            chat_id=config.main_channel,
            photo=image_bytes_io,
            caption=final_caption,
            reply_markup=order_keyboard
        )
        logger.info(f"‚úÖ –ü–æ—Å—Ç –∑ –∞—Ä—Ç–∏–∫—É–ª–æ–º {sku} (ID: {unique_post_id}) —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ {config.main_channel}.")
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
        save_posted_id(unique_post_id)
        
    except TelegramBadRequest as e:
        if "caption is too long" in e.message:
            logger.warning(f"–û–ø–∏—Å –¥–ª—è –ø–æ—Å—Ç–∞ {sku} –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –°–ø—Ä–æ–±–∞ —Å–∫–æ—Ä–æ—Ç–∏—Ç–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–µ —Ä–∞–∑.")
            # –°–ø—Ä–æ–±–∞ —Å–∫–æ—Ä–æ—Ç–∏—Ç–∏ –æ–ø–∏—Å —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–µ —Ä–∞–∑
            truncated_caption = final_caption[:1020] + "..."
            await bot.send_photo(
                chat_id=config.main_channel,
                photo=image_bytes_io,
                caption=truncated_caption,
                reply_markup=order_keyboard
            )
            logger.info(f"‚úÖ –°–∫–æ—Ä–æ—á–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –ø–æ—Å—Ç–∞ {sku} —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞.")
            save_posted_id(unique_post_id)
        else:
             logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø–æ—Å—Ç–∞ –∑ –∞—Ä—Ç–∏–∫—É–ª–æ–º {sku}: {e}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø–æ—Å—Ç–∞ –∑ –∞—Ä—Ç–∏–∫—É–ª–æ–º {sku}: {e}")