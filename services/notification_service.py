# services/notification_service.py
import logging
from aiogram import Bot
from aiogram.types import BufferedInputFile
from typing import Dict, Any
import io # –ü–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è BufferedInputFile

from config_reader import config
from services.order_service import SUPPLIER_NAMES

logger = logging.getLogger(__name__)

# –°–ª–æ–≤–Ω–∏–∫ ID –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
MANAGER_TELEGRAM_IDS: Dict[str, int] = {
    "landliz": config.test_channel, # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤ —Ç–µ—Å—Ç–æ–≤–∏–π –∫–∞–Ω–∞–ª, –ø–æ–∫–∏ –Ω–µ–º–∞—î —Ä–µ–∞–ª—å–Ω–æ–≥–æ ID
    "unknown": config.admin_id,
}

async def send_new_order_notifications(bot: Bot, order_data: Dict[str, Any], txt_content: str, filename: str):
    """–ù–∞–¥—Å–∏–ª–∞—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."""
    order_id = order_data.get('order_id', 'N/A')
    supplier_ids = set(item.get('supplier_id', 'unknown') for item in order_data.get('cart', {}).get('items', []))
    supplier_names = [SUPPLIER_NAMES.get(sid, sid.capitalize()) for sid in supplier_ids]
    supplier_list_str = ", ".join(supplier_names)
    all_ttns = order_data.get('ttn', {}) # –°–ª–æ–≤–Ω–∏–∫ {supplier_id: ttn}

    txt_file_bytes = txt_content.encode('utf-8')

    # 1. –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É (–≤ —Ç–µ—Å—Ç–æ–≤–∏–π –∫–∞–Ω–∞–ª)
    admin_caption = f"üî• –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è `{order_id}`\n–ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∏: `{supplier_list_str}`"
    try:
        admin_txt_file = BufferedInputFile(txt_file_bytes, filename=filename)
        await bot.send_document(chat_id=config.admin_id, document=admin_txt_file, caption=admin_caption, parse_mode="Markdown") # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É –≤ –æ—Å–æ–±–∏—Å—Ç—ñ
        logger.info(f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ {order_id} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except Exception as e: logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")

    # 2. –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    for supplier_id in supplier_ids:
        manager_id = MANAGER_TELEGRAM_IDS.get(supplier_id)
        if not manager_id:
             logger.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è {supplier_id}."); continue
        supplier_name = SUPPLIER_NAMES.get(supplier_id, supplier_id)
        manager_caption = f"üì¶ –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è `{order_id}` –¥–ª—è `{supplier_name}`"
        ttn = all_ttns.get(supplier_id) # –¢–¢–ù –¥–ª—è —Ü—å–æ–≥–æ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞
        try:
             # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ io.BytesIO –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –±–∞–π—Ç—ñ–≤
             manager_txt_stream = io.BytesIO(txt_file_bytes)
             manager_txt_file = BufferedInputFile(manager_txt_stream.read(), filename=filename) # –ß–∏—Ç–∞—î–º–æ –±–∞–π—Ç–∏ –∑—ñ —Å—Ç—Ä—ñ–º—É
             await bot.send_document(chat_id=manager_id, document=manager_txt_file, caption=manager_caption, parse_mode="Markdown")
             if ttn and order_data.get('payment_method') == 'full':
                 await bot.send_message(chat_id=manager_id, text=f"üìÑ –°—Ç–≤–æ—Ä–µ–Ω–æ –¢–¢–ù: `{ttn}`", parse_mode="Markdown")
             logger.info(f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É {supplier_name} ({manager_id}) –ø—Ä–æ {order_id} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
        except Exception as e: logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É {supplier_name}: {e}")

    # 3. –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É
    try:
        customer_id = order_data.get('customer_id')
        if not customer_id: raise ValueError("Customer ID is missing")
        final_message = "üéâ –î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ. –î–µ—Ç–∞–ª—ñ —É —Ñ–∞–π–ª—ñ."
        if all_ttns:
             final_message += "\n\n–í–∞—à—ñ –¢–¢–ù:"
             has_ttn = False
             for sup_id, ttn_val in all_ttns.items():
                 if ttn_val: # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –¢–¢–ù —î
                     sup_name = SUPPLIER_NAMES.get(sup_id, sup_id)
                     final_message += f"\n‚ñ™Ô∏è ({sup_name}): `{ttn_val}`"; has_ttn = True
             if not has_ttn: final_message += " –æ—á—ñ–∫—É–π—Ç–µ –Ω–æ–º–µ—Ä..." # –Ø–∫—â–æ —Å–ª–æ–≤–Ω–∏–∫ —î, –∞–ª–µ –¢–¢–ù —â–µ –Ω–µ–º–∞—î

        client_txt_stream = io.BytesIO(txt_file_bytes)
        client_txt_file = BufferedInputFile(client_txt_stream.read(), filename=filename)
        await bot.send_document(chat_id=customer_id, document=client_txt_file, caption=final_message, parse_mode="Markdown")
        logger.info(f"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É {customer_id} –ø—Ä–æ {order_id} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except Exception as e: logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É {order_data.get('customer_id')}: {e}", exc_info=True)